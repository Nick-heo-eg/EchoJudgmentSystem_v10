from __future__ import annotations
import logging
import os
import platform
from typing import TYPE_CHECKING
from echo_engine.amoeba.env_detect import detect_cloud
from echo_engine.base import BaseAdapter

try:
    from echo_engine.amoeba.amoeba_manager import AmoebaManager
except ImportError as e:
    print(f"‚ö†Ô∏è Amoeba Manager Î°úÎìú Ïã§Ìå®: {e}")

"""
üåå Cloud Adapter for Amoeba v0.2
ÌÅ¥ÎùºÏö∞Îìú ÌôòÍ≤Ω (AWS/Azure/GCP) ÌäπÌôî Ïñ¥ÎåëÌÑ∞
"""





if TYPE_CHECKING:
    pass  # Type checking Ï†ÑÏö© ÏûÑÌè¨Ìä∏Í∞Ä ÏûàÏùÑ Í≤ΩÏö∞ Ïó¨Í∏∞Ïóê Ï∂îÍ∞Ä

log = logging.getLogger("amoeba.cloud_adapter")


class CloudAdapter(BaseAdapter):
    """ÌÅ¥ÎùºÏö∞Îìú ÌôòÍ≤Ω ÌäπÌôî Ïñ¥ÎåëÌÑ∞"""

    name = "cloud"
    priority = 7  # ÎÜíÏùÄ Ïö∞ÏÑ†ÏàúÏúÑ

    def detect(self) -> bool:
        """ÌÅ¥ÎùºÏö∞Îìú ÌôòÍ≤Ω Í∞êÏßÄ"""
        cloud_info = detect_cloud()
        is_cloud = cloud_info.get("is_cloud", False)

        if is_cloud:
            provider = cloud_info.get("provider", "unknown")
            log.info(f"‚òÅÔ∏è ÌÅ¥ÎùºÏö∞Îìú ÌôòÍ≤Ω Í∞êÏßÄ: {provider.upper()}")

            if cloud_info.get("instance_type"):
                log.info(f"üèóÔ∏è Ïù∏Ïä§ÌÑ¥Ïä§ ÌÉÄÏûÖ: {cloud_info['instance_type']}")

        return is_cloud

    def prelink(self, mgr: AmoebaManager) -> None:
        """ÌÅ¥ÎùºÏö∞Îìú Ïó∞Í≤∞ Ï†Ñ Ï§ÄÎπÑ"""
        log.info("üîß ÌÅ¥ÎùºÏö∞Îìú ÌôòÍ≤Ω Ï§ÄÎπÑ Ï§ë...")

        cloud_info = detect_cloud()
        provider = cloud_info.get("provider", "unknown")

        # ÌÅ¥ÎùºÏö∞Îìú Í≥µÌÜµ ÏÑ§Ï†ï
        os.environ["CLOUD_PROVIDER"] = provider.upper()
        os.environ["CLOUD_INSTANCE"] = "1"

        if provider == "aws":
            self._prepare_aws(mgr)
        elif provider == "azure":
            self._prepare_azure(mgr)
        elif provider == "gcp":
            self._prepare_gcp(mgr)

        # ÌÅ¥ÎùºÏö∞Îìú Í≥µÌÜµ Í≤ΩÎ°ú Îß§Ìïë
        cloud_paths = {
            "/mnt/cloud": "/opt/cloud",
            "/cloud-storage": "/mnt/storage",
            "/logs": os.path.join(
                os.path.expanduser("~"), ".cache", "echo", "logs", r"cloud"
            ),
        }

        mgr.linker.path_mapper.mappings.update(cloud_paths)

    def _prepare_aws(self, mgr: AmoebaManager) -> None:
        """AWS ÌôòÍ≤Ω Ï§ÄÎπÑ"""
        log.info("üöÄ AWS ÌôòÍ≤Ω ÏÑ§Ï†ï")

        # AWS Î©îÌÉÄÎç∞Ïù¥ÌÑ∞ ÏÑúÎπÑÏä§ ÏÑ§Ï†ï
        os.environ["AWS_METADATA_SERVICE_TIMEOUT"] = "5"
        os.environ["AWS_METADATA_SERVICE_NUM_ATTEMPTS"] = "2"

        # ECS ÌÉúÏä§ÌÅ¨Ïù∏ÏßÄ ÌôïÏù∏
        if os.getenv("AWS_EXECUTION_ROLE_ARN"):
            os.environ["AWS_ECS_TASK"] = "1"
            log.info("üì¶ ECS ÌÉúÏä§ÌÅ¨ ÌôòÍ≤Ω Í∞êÏßÄ")

        # Lambda ÌôòÍ≤ΩÏù∏ÏßÄ ÌôïÏù∏
        if os.getenv("AWS_LAMBDA_FUNCTION_NAME"):
            os.environ["AWS_LAMBDA"] = "1"
            log.info("‚ö° Lambda ÌôòÍ≤Ω Í∞êÏßÄ")

    def _prepare_azure(self, mgr: AmoebaManager) -> None:
        """Azure ÌôòÍ≤Ω Ï§ÄÎπÑ"""
        log.info("üî∑ Azure ÌôòÍ≤Ω ÏÑ§Ï†ï")

        # Azure Î©îÌÉÄÎç∞Ïù¥ÌÑ∞ ÏÑ§Ï†ï
        os.environ["AZURE_METADATA_TIMEOUT"] = "5"

        # App ServiceÏù∏ÏßÄ ÌôïÏù∏
        if os.getenv("WEBSITE_SITE_NAME"):
            os.environ["AZURE_APP_SERVICE"] = "1"
            log.info("üåê App Service ÌôòÍ≤Ω Í∞êÏßÄ")

    def _prepare_gcp(self, mgr: AmoebaManager) -> None:
        """GCP ÌôòÍ≤Ω Ï§ÄÎπÑ"""
        log.info("üåà GCP ÌôòÍ≤Ω ÏÑ§Ï†ï")

        # GCP Î©îÌÉÄÎç∞Ïù¥ÌÑ∞ ÏÑ§Ï†ï
        os.environ["GCE_METADATA_TIMEOUT"] = "5"

        # Cloud RunÏù∏ÏßÄ ÌôïÏù∏
        if os.getenv("K_SERVICE"):
            os.environ["GCP_CLOUD_RUN"] = "1"
            log.info("üèÉ Cloud Run ÌôòÍ≤Ω Í∞êÏßÄ")

    def link(self, mgr: AmoebaManager) -> None:
        """ÌÅ¥ÎùºÏö∞Îìú ÏãúÏä§ÌÖú Ïó∞Í≤∞"""
        log.info("üîó ÌÅ¥ÎùºÏö∞Îìú ÏãúÏä§ÌÖú Ïó∞Í≤∞ Ï§ë...")

        cloud_info = detect_cloud()
        provider = cloud_info.get("provider", "unknown")

        # ÌÅ¥ÎùºÏö∞Îìú ÏÑúÎπÑÏä§ Îì±Î°ù
        mgr.linker.register_service(
            "cloud_provider",
            {
                "provider": provider,
                "instance_type": cloud_info.get("instance_type"),
                "region": self._detect_region(provider),
                "availability_zone": self._detect_az(provider),
            },
        )

        # ÌÅ¥ÎùºÏö∞Îìú Ïä§ÌÜ†Î¶¨ÏßÄ ÏÑúÎπÑÏä§
        mgr.linker.register_service(
            "cloud_storage", {"provider": provider, "available": True}
        )

        # Î°úÍ∑∏ ÏàòÏßë ÏÑúÎπÑÏä§
        mgr.linker.register_service(
            "cloud_logging", {"provider": provider, "centralized": True}
        )

        # Î©îÌä∏Î¶≠ ÏàòÏßë ÏÑúÎπÑÏä§
        mgr.linker.register_service(
            "cloud_metrics", {"provider": provider, "enabled": True}
        )

        log.info("‚úÖ ÌÅ¥ÎùºÏö∞Îìú Ïó∞Í≤∞ ÏôÑÎ£å")

    def _detect_region(self, provider: str) -> str:
        """ÌÅ¥ÎùºÏö∞Îìú Î¶¨Ï†Ñ Í∞êÏßÄ"""
        if provider == "aws":
            return os.getenv("AWS_REGION", os.getenv("AWS_DEFAULT_REGION", "unknown"))
        elif provider == "azure":
            return os.getenv("AZURE_REGION", "unknown")
        elif provider == "gcp":
            return os.getenv("GOOGLE_CLOUD_REGION", "unknown")
        return "unknown"

    def _detect_az(self, provider: str) -> str:
        """Í∞ÄÏö© ÏòÅÏó≠ Í∞êÏßÄ"""
        # Ïã§Ï†úÎ°úÎäî Î©îÌÉÄÎç∞Ïù¥ÌÑ∞ APIÎ•º ÌÜµÌï¥ Í∞ÄÏ†∏ÏôÄÏïº ÌïòÏßÄÎßå,
        # Ïó¨Í∏∞ÏÑúÎäî ÌôòÍ≤ΩÎ≥ÄÏàò Í∏∞Î∞òÏúºÎ°ú Í∞ÑÎã®Ìûà Ï≤òÎ¶¨
        if provider == "aws":
            return os.getenv("AWS_AVAILABILITY_ZONE", "unknown")
        return "unknown"

    def optimize(self, mgr: AmoebaManager) -> None:
        """ÌÅ¥ÎùºÏö∞Îìú ÌôòÍ≤Ω ÏµúÏ†ÅÌôî"""
        log.info("‚ö° ÌÅ¥ÎùºÏö∞Îìú ÌôòÍ≤Ω ÏµúÏ†ÅÌôî ÏãúÏûë...")

        # ÌÅ¥ÎùºÏö∞Îìú Í≥µÌÜµ ÏµúÏ†ÅÌôî
        mgr.optimizer.apply_cloud_optimizations()

        # Î©îÎ™®Î¶¨ ÏµúÏ†ÅÌôî (ÌÅ¥ÎùºÏö∞ÎìúÎäî Î≥¥ÌÜµ Î©îÎ™®Î¶¨ Ï†úÌïú)
        mgr.optimizer.optimize_memory()

        # ÎÑ§Ìä∏ÏõåÌÅ¨ ÏµúÏ†ÅÌôî
        self._optimize_network(mgr)

        # Î°úÍπÖ ÏµúÏ†ÅÌôî (ÌÅ¥ÎùºÏö∞Îìú Î°úÍ∑∏ ÏàòÏßë)
        self._optimize_logging(mgr)

        # Î©îÌä∏Î¶≠ ÏµúÏ†ÅÌôî
        self._optimize_metrics(mgr)

        cloud_info = detect_cloud()
        provider = cloud_info.get("provider", "unknown")

        if provider == "aws":
            self._optimize_aws(mgr)
        elif provider == "azure":
            self._optimize_azure(mgr)
        elif provider == "gcp":
            self._optimize_gcp(mgr)

        log.info("‚úÖ ÌÅ¥ÎùºÏö∞Îìú ÏµúÏ†ÅÌôî ÏôÑÎ£å")

    def _optimize_network(self, mgr: AmoebaManager) -> None:
        """ÎÑ§Ìä∏ÏõåÌÅ¨ ÏµúÏ†ÅÌôî"""
        # ÌÅ¥ÎùºÏö∞Îìú ÌôòÍ≤ΩÏóêÏÑú ÎÑ§Ìä∏ÏõåÌÅ¨ ÏßÄÏó∞ ÏµúÏ†ÅÌôî
        os.environ["REQUESTS_TIMEOUT"] = "30"
        os.environ["HTTPX_TIMEOUT"] = "30"

        mgr.optimizer.optimizations_applied.append("cloud_network_optimization")

    def _optimize_logging(self, mgr: AmoebaManager) -> None:
        """Î°úÍπÖ ÏµúÏ†ÅÌôî"""
        # Íµ¨Ï°∞ÌôîÎêú Î°úÍπÖ ÌôúÏÑ±Ìôî
        os.environ["LOG_FORMAT"] = "json"
        os.environ["LOG_LEVEL"] = "INFO"

        mgr.optimizer.optimizations_applied.append("cloud_logging_optimization")

    def _optimize_metrics(self, mgr: AmoebaManager) -> None:
        """Î©îÌä∏Î¶≠ ÏµúÏ†ÅÌôî"""
        # Î©îÌä∏Î¶≠ ÏàòÏßë ÌôúÏÑ±Ìôî
        os.environ["METRICS_ENABLED"] = "1"
        os.environ["TELEMETRY_ENABLED"] = "1"

        mgr.optimizer.optimizations_applied.append("cloud_metrics_optimization")

    def _optimize_aws(self, mgr: AmoebaManager) -> None:
        """AWS ÌäπÌôî ÏµúÏ†ÅÌôî"""
        # X-Ray Ìä∏Î†àÏù¥Ïã±
        if not os.getenv("_X_AMZN_TRACE_ID"):
            os.environ["AWS_XRAY_TRACING_NAME"] = "echo-amoeba"

        # CloudWatch Î°úÍ∑∏
        os.environ["AWS_CLOUDWATCH_ENABLED"] = "1"

        mgr.optimizer.optimizations_applied.append("aws_optimization")

    def _optimize_azure(self, mgr: AmoebaManager) -> None:
        """Azure ÌäπÌôî ÏµúÏ†ÅÌôî"""
        # Application Insights
        os.environ["APPLICATIONINSIGHTS_CONNECTION_STRING"] = os.getenv(
            "APPLICATIONINSIGHTS_CONNECTION_STRING", ""
        )

        mgr.optimizer.optimizations_applied.append("azure_optimization")

    def _optimize_gcp(self, mgr: AmoebaManager) -> None:
        """GCP ÌäπÌôî ÏµúÏ†ÅÌôî"""
        # Cloud Logging
        os.environ["GOOGLE_CLOUD_LOGGING_ENABLED"] = "1"

        # Cloud Monitoring
        os.environ["GOOGLE_CLOUD_MONITORING_ENABLED"] = "1"

        mgr.optimizer.optimizations_applied.append("gcp_optimization")
