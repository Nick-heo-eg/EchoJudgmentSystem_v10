#!/usr/bin/env python3
"""
üéØ FIST Claude Bridge - FIST Íµ¨Ï°∞ ÌÖúÌîåÎ¶øÍ≥º Claude ÌÜµÌï© Î∏åÎ¶¨ÏßÄ
FIST, RISE, DIR Íµ¨Ï°∞ ÌÖúÌîåÎ¶øÏùÑ Claude AIÏôÄ Ïó∞ÎèôÌïòÏó¨ Í≥†ÎèÑÌôîÎêú ÌåêÎã® ÏãúÏä§ÌÖú Íµ¨ÌòÑ
"""

import json
import os
import time
import asyncio
from datetime import datetime
from typing import Dict, List, Optional, Tuple, Any
from dataclasses import dataclass

# FIST ÌÖúÌîåÎ¶ø ÏãúÏä§ÌÖú ÏûÑÌè¨Ìä∏
from .fist_templates import (
    FISTTemplate,
    FISTRequest,
    FISTResponse,
    RISETemplate,
    DIRTemplate,
    FISTTemplateEngine,
    TemplateSelectionStrategy,
    TemplateCategory,
    TemplateComplexity,
    FISTStructureType,
)

# Í∏∞Ï°¥ Claude Bridge ÏûÑÌè¨Ìä∏
from .claude_bridge import ClaudeBridge, ClaudeJudgmentRequest, ClaudeJudgmentResponse


@dataclass
class FISTClaudeRequest:
    """FIST Íµ¨Ï°∞ Í∏∞Î∞ò Claude ÏöîÏ≤≠"""

    input_text: str
    category: TemplateCategory
    structure_type: FISTStructureType = FISTStructureType.FIST

    # Claude ÏÑ§Ï†ï
    claude_model: str = "claude-3-5-sonnet-20241022"
    max_tokens: int = 2000
    temperature: float = 0.3

    # FIST ÏÑ§Ï†ï
    template_id: Optional[str] = None
    complexity: Optional[TemplateComplexity] = None
    selection_strategy: TemplateSelectionStrategy = TemplateSelectionStrategy.BEST_MATCH

    # Ïª®ÌÖçÏä§Ìä∏
    context: Dict[str, Any] = None
    previous_judgments: Optional[List[Dict]] = None

    def __post_init__(self):
        if self.context is None:
            self.context = {}


@dataclass
class FISTClaudeResponse:
    """FIST Íµ¨Ï°∞ Í∏∞Î∞ò Claude ÏùëÎãµ"""

    # FIST Íµ¨Ï°∞ Í≤∞Í≥º
    fist_response: FISTResponse

    # Claude ÏõêÎ≥∏ ÏùëÎãµ
    claude_response: ClaudeJudgmentResponse

    # ÌÜµÌï© Í≤∞Í≥º
    integrated_judgment: str
    final_confidence: float
    structure_analysis: Dict[str, Any]

    # Î©îÌÉÄÎç∞Ïù¥ÌÑ∞
    template_used: str
    processing_time: float
    timestamp: str = None

    def __post_init__(self):
        if self.timestamp is None:
            self.timestamp = datetime.now().isoformat()

    def to_standard_format(self) -> Dict[str, Any]:
        """ÌëúÏ§Ä ÌåêÎã® ÌòïÏãùÏúºÎ°ú Î≥ÄÌôò"""
        return {
            "judgment": self.integrated_judgment,
            "confidence": self.final_confidence,
            "reasoning": self.structure_analysis.get("reasoning", ""),
            "emotion_detected": self.claude_response.emotion_detected or "analyzed",
            "strategy_suggested": self.claude_response.strategy_suggested
            or "structured",
            "alternatives": self.claude_response.alternatives or [],
            "processing_time": self.processing_time,
            "fist_structure": self.fist_response.get_structured_output(),
            "template_used": self.template_used,
            "structure_type": self.fist_response.structure_type.value,
        }


class FISTClaudeBridge:
    """FIST Íµ¨Ï°∞ ÌÖúÌîåÎ¶øÍ≥º ClaudeÎ•º Ïó∞ÎèôÌïòÎäî Í≥†Í∏â Î∏åÎ¶¨ÏßÄ"""

    def __init__(self, api_mode: str = "mock", templates_dir: Optional[str] = None):
        """
        FIST Claude Bridge Ï¥àÍ∏∞Ìôî

        Args:
            api_mode: Claude API Î™®Îìú ("direct", "mock")
            templates_dir: FIST ÌÖúÌîåÎ¶ø ÎîîÎ†âÌÜ†Î¶¨ Í≤ΩÎ°ú
        """
        self.api_mode = api_mode

        # Í∏∞Ï°¥ Claude Bridge Ï¥àÍ∏∞Ìôî
        self.claude_bridge = ClaudeBridge(api_mode=api_mode)

        # FIST ÌÖúÌîåÎ¶ø ÏóîÏßÑ Ï¥àÍ∏∞Ìôî
        self.fist_engine = FISTTemplateEngine(templates_dir=templates_dir)

        # ÏÑ±Îä• ÌÜµÍ≥Ñ
        self.performance_stats = {
            "total_fist_requests": 0,
            "successful_fist_requests": 0,
            "failed_fist_requests": 0,
            "average_processing_time": 0.0,
            "template_usage": {},
            "structure_usage": {},
            "claude_integration_success": 0,
        }

        # ÌíàÏßà ÌèâÍ∞Ä Í∏∞Ï§Ä
        self.quality_metrics = {
            "structure_completeness": 0.0,
            "claude_integration": 0.0,
            "response_coherence": 0.0,
            "template_effectiveness": 0.0,
        }

        print(f"üéØ FIST Claude Bridge Ï¥àÍ∏∞Ìôî ÏôÑÎ£å - API Î™®Îìú: {api_mode}")

    async def process_fist_request(
        self, request: FISTClaudeRequest
    ) -> FISTClaudeResponse:
        """FIST Íµ¨Ï°∞ Í∏∞Î∞ò Claude ÏöîÏ≤≠ Ï≤òÎ¶¨"""
        start_time = time.time()
        self.performance_stats["total_fist_requests"] += 1

        try:
            # 1. FIST ÏöîÏ≤≠ Í∞ùÏ≤¥ ÏÉùÏÑ±
            fist_request = FISTRequest(
                input_text=request.input_text,
                category=request.category,
                structure_type=request.structure_type,
                complexity=request.complexity,
                template_id=request.template_id,
                context=request.context,
            )

            # 2. FIST ÌÖúÌîåÎ¶ø Ï≤òÎ¶¨
            fist_response = self.fist_engine.process_request(fist_request)

            # 3. FIST Íµ¨Ï°∞Î•º Claude ÌîÑÎ°¨ÌîÑÌä∏Î°ú Î≥ÄÌôò
            claude_prompt = self._convert_fist_to_claude_prompt(fist_response, request)

            # 4. Claude ÌåêÎã® ÏöîÏ≤≠
            claude_request = ClaudeJudgmentRequest(
                input_text=claude_prompt,
                context=request.context.get("additional_context", ""),
                judgment_type="comprehensive",
                include_emotion=True,
                include_strategy=True,
                previous_judgments=request.previous_judgments,
            )

            # 5. Claude ÏùëÎãµ Ï≤òÎ¶¨
            claude_response = await self.claude_bridge.request_claude_judgment(
                claude_request
            )

            # 6. FISTÏôÄ Claude ÏùëÎãµ ÌÜµÌï©
            integrated_response = self._integrate_fist_claude_responses(
                fist_response, claude_response, request
            )

            # 7. ÏÑ±Îä• ÌÜµÍ≥Ñ ÏóÖÎç∞Ïù¥Ìä∏
            processing_time = time.time() - start_time
            self._update_performance_stats(fist_response, processing_time, success=True)

            return integrated_response

        except Exception as e:
            self.performance_stats["failed_fist_requests"] += 1
            print(f"‚ùå FIST Claude ÏöîÏ≤≠ Ï≤òÎ¶¨ Ïã§Ìå®: {e}")

            # Ïò§Î•ò ÏùëÎãµ ÏÉùÏÑ±
            return self._create_error_response(
                request, str(e), time.time() - start_time
            )

    def _convert_fist_to_claude_prompt(
        self, fist_response: FISTResponse, request: FISTClaudeRequest
    ) -> str:
        """FIST Íµ¨Ï°∞Î•º Claude ÌîÑÎ°¨ÌîÑÌä∏Î°ú Î≥ÄÌôò"""

        # FIST Íµ¨Ï°∞ Í∏∞Î∞ò ÌîÑÎ°¨ÌîÑÌä∏ ÏÉùÏÑ±
        prompt_parts = []

        # ÏãúÏä§ÌÖú ÌîÑÎ°¨ÌîÑÌä∏
        prompt_parts.append(
            f"""
ÎãπÏã†ÏùÄ FIST Íµ¨Ï°∞(Frame, Insight, Strategy, Tactics)Î•º ÏÇ¨Ïö©ÌïòÏó¨ Ï≤¥Í≥ÑÏ†ÅÏù∏ ÌåêÎã®ÏùÑ ÏàòÌñâÌïòÎäî Í≥†Í∏â AI Ïñ¥ÏãúÏä§ÌÑ¥Ìä∏ÏûÖÎãàÎã§.

Îã§Ïùå FIST Íµ¨Ï°∞ Î∂ÑÏÑùÏùÑ Î∞îÌÉïÏúºÎ°ú Ï¢ÖÌï©Ï†ÅÏù∏ ÌåêÎã®ÏùÑ Ï†úÏãúÌï¥Ï£ºÏÑ∏Ïöî:

## ÏõêÎ≥∏ ÏûÖÎ†•
{request.input_text}

## FIST Íµ¨Ï°∞ Î∂ÑÏÑù Í≤∞Í≥º

### Frame (Îß•ÎùΩ ÏÑ§Ï†ï)
{fist_response.frame_result}

### Insight (Î∂ÑÏÑù Î∞è Ïù¥Ìï¥)
{fist_response.insight_result}

### Strategy (Ï†ëÍ∑º Ï†ÑÎûµ)
{fist_response.strategy_result}

### Tactics (Íµ¨Ï≤¥Ï†Å Ïã§Ìñâ)
{fist_response.tactics_result}

## ÏöîÏ≤≠ÏÇ¨Ìï≠
ÏúÑ FIST Íµ¨Ï°∞ Î∂ÑÏÑùÏùÑ Î∞îÌÉïÏúºÎ°ú:
1. Ï¢ÖÌï©Ï†ÅÏù∏ ÌåêÎã®Í≥º Í∂åÍ≥†ÏÇ¨Ìï≠ÏùÑ Ï†úÏãúÌï¥Ï£ºÏÑ∏Ïöî
2. Í∞Å FIST ÏöîÏÜåÍ∞ÑÏùò ÏùºÍ¥ÄÏÑ±Í≥º Ïó∞Í≤∞ÏÑ±ÏùÑ ÌèâÍ∞ÄÌï¥Ï£ºÏÑ∏Ïöî
3. Ïã§Ìñâ Í∞ÄÎä•ÏÑ±Í≥º Ìö®Í≥ºÏÑ±ÏùÑ Í≥†Î†§Ìïú ÏµúÏ¢Ö Ï†úÏïàÏùÑ Ìï¥Ï£ºÏÑ∏Ïöî
4. Ïû†Ïû¨Ï†Å ÏúÑÌóòÏöîÏÜåÏôÄ ÎåÄÏùëÎ∞©ÏïàÏùÑ Ï†úÏãúÌï¥Ï£ºÏÑ∏Ïöî

ÏùëÎãµ ÌòïÏãù:
- judgment: ÌïµÏã¨ ÌåêÎã® (100Ïûê Ïù¥ÎÇ¥)
- confidence: Ïã†Î¢∞ÎèÑ (0.0-1.0)
- reasoning: ÌåêÎã® Í∑ºÍ±∞ (300Ïûê Ïù¥ÎÇ¥)
- emotion_detected: Í∞êÏßÄÎêú Í∞êÏ†ï ÏÉÅÌÉú
- strategy_suggested: Ï∂îÏ≤ú Ï†ÑÎûµ
- alternatives: ÎåÄÏïà Ï†úÏïà (ÏµúÎåÄ 3Í∞ú)
"""
        )

        # Ï∂îÍ∞Ä Ïª®ÌÖçÏä§Ìä∏ (ÏûàÎäî Í≤ΩÏö∞)
        if request.context:
            prompt_parts.append(
                f"\n## Ï∂îÍ∞Ä Ïª®ÌÖçÏä§Ìä∏\n{json.dumps(request.context, ensure_ascii=False, indent=2)}"
            )

        return "\n".join(prompt_parts)

    def _integrate_fist_claude_responses(
        self,
        fist_response: FISTResponse,
        claude_response: ClaudeJudgmentResponse,
        request: FISTClaudeRequest,
    ) -> FISTClaudeResponse:
        """FISTÏôÄ Claude ÏùëÎãµÏùÑ ÌÜµÌï©"""

        # 1. ÌÜµÌï© ÌåêÎã® ÏÉùÏÑ±
        integrated_judgment = self._create_integrated_judgment(
            fist_response, claude_response
        )

        # 2. ÏµúÏ¢Ö Ïã†Î¢∞ÎèÑ Í≥ÑÏÇ∞
        final_confidence = self._calculate_final_confidence(
            fist_response, claude_response
        )

        # 3. Íµ¨Ï°∞ Î∂ÑÏÑù ÏàòÌñâ
        structure_analysis = self._analyze_structure_quality(
            fist_response, claude_response
        )

        # 4. ÌÜµÌï© ÏùëÎãµ ÏÉùÏÑ±
        integrated_response = FISTClaudeResponse(
            fist_response=fist_response,
            claude_response=claude_response,
            integrated_judgment=integrated_judgment,
            final_confidence=final_confidence,
            structure_analysis=structure_analysis,
            template_used=fist_response.template_used,
            processing_time=fist_response.processing_time
            + claude_response.processing_time,
        )

        return integrated_response

    def _create_integrated_judgment(
        self, fist_response: FISTResponse, claude_response: ClaudeJudgmentResponse
    ) -> str:
        """ÌÜµÌï© ÌåêÎã® ÏÉùÏÑ±"""

        # FIST Íµ¨Ï°∞ Í∏∞Î∞ò ÌåêÎã®
        fist_judgment = fist_response.comprehensive_judgment

        # Claude ÌåêÎã®
        claude_judgment = claude_response.judgment

        # ÌÜµÌï© ÌåêÎã® ÏÉùÏÑ±
        if fist_response.confidence > claude_response.confidence:
            primary_judgment = fist_judgment
            secondary_judgment = claude_judgment
            primary_source = "FIST Íµ¨Ï°∞ Î∂ÑÏÑù"
            secondary_source = "Claude AI Î∂ÑÏÑù"
        else:
            primary_judgment = claude_judgment
            secondary_judgment = fist_judgment
            primary_source = "Claude AI Î∂ÑÏÑù"
            secondary_source = "FIST Íµ¨Ï°∞ Î∂ÑÏÑù"

        integrated_judgment = f"""
## ÌÜµÌï© ÌåêÎã®

**ÌïµÏã¨ Í∂åÍ≥†ÏÇ¨Ìï≠:**
{primary_judgment}

**Ï∂îÍ∞Ä Í≥†Î†§ÏÇ¨Ìï≠:**
{secondary_judgment}

**Ï¢ÖÌï© ÌèâÍ∞Ä:**
{primary_source}Í≥º {secondary_source}ÏùÑ Ï¢ÖÌï©Ìïú Í≤∞Í≥º, Ï≤¥Í≥ÑÏ†ÅÏù∏ Ï†ëÍ∑ºÍ≥º AI Î∂ÑÏÑùÏù¥ ÏùºÏπòÌïòÎäî Î∞©Ìñ•ÏúºÎ°ú ÌåêÎã®ÏùÑ Ï†úÏãúÌï©ÎãàÎã§.
"""

        return integrated_judgment.strip()

    def _calculate_final_confidence(
        self, fist_response: FISTResponse, claude_response: ClaudeJudgmentResponse
    ) -> float:
        """ÏµúÏ¢Ö Ïã†Î¢∞ÎèÑ Í≥ÑÏÇ∞"""

        # Í∏∞Î≥∏ Ïã†Î¢∞ÎèÑÎì§
        fist_confidence = fist_response.confidence
        claude_confidence = claude_response.confidence

        # ÏùºÏπòÎèÑ Í≥ÑÏÇ∞ (Í∞ÑÎã®Ìïú Î∞©Î≤ï)
        confidence_gap = abs(fist_confidence - claude_confidence)
        consistency_bonus = 1.0 - (confidence_gap * 0.5)

        # Í∞ÄÏ§ë ÌèâÍ∑† Í≥ÑÏÇ∞
        # FISTÎäî Íµ¨Ï°∞Ï†Å Ï†ëÍ∑ºÏù¥ÎØÄÎ°ú ÏïΩÍ∞Ñ Îçî Í∞ÄÏ§ëÏπò Î∂ÄÏó¨
        weighted_confidence = fist_confidence * 0.6 + claude_confidence * 0.4

        # ÏùºÏπòÎèÑ Î≥¥ÎÑàÏä§ Ï†ÅÏö©
        final_confidence = weighted_confidence * consistency_bonus

        # 0.0 ~ 1.0 Î≤îÏúÑÎ°ú Ï†úÌïú
        return max(0.0, min(1.0, final_confidence))

    def _analyze_structure_quality(
        self, fist_response: FISTResponse, claude_response: ClaudeJudgmentResponse
    ) -> Dict[str, Any]:
        """Íµ¨Ï°∞ ÌíàÏßà Î∂ÑÏÑù"""

        analysis = {
            "structure_completeness": self._assess_structure_completeness(
                fist_response
            ),
            "claude_integration": self._assess_claude_integration(claude_response),
            "response_coherence": self._assess_response_coherence(
                fist_response, claude_response
            ),
            "template_effectiveness": self._assess_template_effectiveness(
                fist_response
            ),
            "reasoning": self._generate_quality_reasoning(
                fist_response, claude_response
            ),
            "recommendations": self._generate_improvement_recommendations(
                fist_response, claude_response
            ),
        }

        return analysis

    def _assess_structure_completeness(self, fist_response: FISTResponse) -> float:
        """Íµ¨Ï°∞ ÏôÑÏÑ±ÎèÑ ÌèâÍ∞Ä"""
        completeness_score = 0.0

        # Í∞Å FIST ÏöîÏÜåÏùò ÏôÑÏÑ±ÎèÑ Ï≤¥ÌÅ¨
        components = [
            fist_response.frame_result,
            fist_response.insight_result,
            fist_response.strategy_result,
            fist_response.tactics_result,
        ]

        for component in components:
            if component and len(component.strip()) > 10:
                completeness_score += 0.25

        return completeness_score

    def _assess_claude_integration(
        self, claude_response: ClaudeJudgmentResponse
    ) -> float:
        """Claude ÌÜµÌï© ÌíàÏßà ÌèâÍ∞Ä"""
        integration_score = 0.0

        # Claude ÏùëÎãµÏùò ÌíàÏßà ÏßÄÌëúÎì§
        if claude_response.judgment and len(claude_response.judgment.strip()) > 20:
            integration_score += 0.3

        if claude_response.reasoning and len(claude_response.reasoning.strip()) > 30:
            integration_score += 0.3

        if claude_response.confidence > 0.5:
            integration_score += 0.2

        if (
            claude_response.emotion_detected
            and claude_response.emotion_detected != "neutral"
        ):
            integration_score += 0.1

        if claude_response.strategy_suggested:
            integration_score += 0.1

        return integration_score

    def _assess_response_coherence(
        self, fist_response: FISTResponse, claude_response: ClaudeJudgmentResponse
    ) -> float:
        """ÏùëÎãµ ÏùºÍ¥ÄÏÑ± ÌèâÍ∞Ä"""
        coherence_score = 0.5  # Í∏∞Î≥∏ Ï†êÏàò

        # Ïã†Î¢∞ÎèÑ ÏùºÏπòÎèÑ
        confidence_consistency = 1.0 - abs(
            fist_response.confidence - claude_response.confidence
        )
        coherence_score += confidence_consistency * 0.3

        # Ï∂îÎ°† Ï∂îÏ†Å ÏôÑÏÑ±ÎèÑ
        if fist_response.reasoning_trace and len(fist_response.reasoning_trace) > 2:
            coherence_score += 0.2

        return min(1.0, coherence_score)

    def _assess_template_effectiveness(self, fist_response: FISTResponse) -> float:
        """ÌÖúÌîåÎ¶ø Ìö®Í≥ºÏÑ± ÌèâÍ∞Ä"""
        effectiveness_score = 0.0

        # Ï≤òÎ¶¨ ÏãúÍ∞Ñ Ìö®Ïú®ÏÑ±
        if fist_response.processing_time < 2.0:
            effectiveness_score += 0.3
        elif fist_response.processing_time < 5.0:
            effectiveness_score += 0.2
        else:
            effectiveness_score += 0.1

        # Ïã†Î¢∞ÎèÑ ÏàòÏ§Ä
        if fist_response.confidence > 0.8:
            effectiveness_score += 0.3
        elif fist_response.confidence > 0.6:
            effectiveness_score += 0.2
        else:
            effectiveness_score += 0.1

        # Ï∂îÎ°† Ï∂îÏ†Å ÌíàÏßà
        if fist_response.reasoning_trace and len(fist_response.reasoning_trace) > 4:
            effectiveness_score += 0.2

        # ÎåÄÏïà Ï†úÍ≥µ
        if fist_response.alternatives and len(fist_response.alternatives) > 0:
            effectiveness_score += 0.2

        return effectiveness_score

    def _generate_quality_reasoning(
        self, fist_response: FISTResponse, claude_response: ClaudeJudgmentResponse
    ) -> str:
        """ÌíàÏßà Î∂ÑÏÑù Í∑ºÍ±∞ ÏÉùÏÑ±"""
        reasoning_parts = []

        # FIST Íµ¨Ï°∞ Î∂ÑÏÑù
        reasoning_parts.append(
            f"FIST Íµ¨Ï°∞ Î∂ÑÏÑù: {fist_response.structure_type.value} ÌÖúÌîåÎ¶ø ÏÇ¨Ïö©"
        )
        reasoning_parts.append(f"ÌÖúÌîåÎ¶ø Ïã†Î¢∞ÎèÑ: {fist_response.confidence:.3f}")

        # Claude Î∂ÑÏÑù
        reasoning_parts.append(f"Claude Î∂ÑÏÑù Ïã†Î¢∞ÎèÑ: {claude_response.confidence:.3f}")

        # ÌÜµÌï© Î∂ÑÏÑù
        confidence_gap = abs(fist_response.confidence - claude_response.confidence)
        if confidence_gap < 0.1:
            reasoning_parts.append("FISTÏôÄ Claude Î∂ÑÏÑùÏù¥ ÎÜíÏùÄ ÏùºÏπòÎèÑÎ•º Î≥¥ÏûÑ")
        elif confidence_gap < 0.3:
            reasoning_parts.append("FISTÏôÄ Claude Î∂ÑÏÑùÏù¥ Ï†ÅÎãπÌïú ÏùºÏπòÎèÑÎ•º Î≥¥ÏûÑ")
        else:
            reasoning_parts.append("FISTÏôÄ Claude Î∂ÑÏÑù Í∞Ñ Ï∞®Ïù¥Í∞Ä ÏûàÏñ¥ Ï∂îÍ∞Ä Í≤ÄÌÜ† ÌïÑÏöî")

        return " | ".join(reasoning_parts)

    def _generate_improvement_recommendations(
        self, fist_response: FISTResponse, claude_response: ClaudeJudgmentResponse
    ) -> List[str]:
        """Í∞úÏÑ† Í∂åÍ≥†ÏÇ¨Ìï≠ ÏÉùÏÑ±"""
        recommendations = []

        # Ïã†Î¢∞ÎèÑ Í∏∞Î∞ò Í∂åÍ≥†
        if fist_response.confidence < 0.6:
            recommendations.append("FIST ÌÖúÌîåÎ¶ø ÏÑ†ÌÉù ÎòêÎäî Ïª®ÌÖçÏä§Ìä∏ Î≥¥ÏôÑ ÌïÑÏöî")

        if claude_response.confidence < 0.6:
            recommendations.append("Claude ÌîÑÎ°¨ÌîÑÌä∏ ÏµúÏ†ÅÌôî ÎòêÎäî Ï∂îÍ∞Ä Ï†ïÎ≥¥ Ï†úÍ≥µ ÌïÑÏöî")

        # ÏùºÍ¥ÄÏÑ± Í∏∞Î∞ò Í∂åÍ≥†
        confidence_gap = abs(fist_response.confidence - claude_response.confidence)
        if confidence_gap > 0.3:
            recommendations.append("FISTÏôÄ Claude Î∂ÑÏÑù Í∞Ñ Ï∞®Ïù¥ ÏõêÏù∏ Î∂ÑÏÑù ÌïÑÏöî")

        # Ï≤òÎ¶¨ ÏãúÍ∞Ñ Í∏∞Î∞ò Í∂åÍ≥†
        total_time = fist_response.processing_time + claude_response.processing_time
        if total_time > 10.0:
            recommendations.append("Ï≤òÎ¶¨ ÏãúÍ∞Ñ ÏµúÏ†ÅÌôî ÌïÑÏöî")

        return recommendations

    def _create_error_response(
        self, request: FISTClaudeRequest, error_message: str, processing_time: float
    ) -> FISTClaudeResponse:
        """Ïò§Î•ò ÏùëÎãµ ÏÉùÏÑ±"""

        # Ïò§Î•ò FIST ÏùëÎãµ ÏÉùÏÑ±
        error_fist_response = FISTResponse(
            request_id="error",
            template_id="error_template",
            frame_result="Ïò§Î•ò Î∞úÏÉùÏúºÎ°ú Ïù∏Ìïú Frame Î∂ÑÏÑù Î∂àÍ∞Ä",
            insight_result=f"Ïò§Î•ò ÎÇ¥Ïö©: {error_message}",
            strategy_result="Ïò§Î•ò Ìï¥Í≤∞ Ï†ÑÎûµ ÌïÑÏöî",
            tactics_result="ÏãúÏä§ÌÖú Ï†êÍ≤Ä Î∞è Ïû¨ÏãúÎèÑ Í∂åÏû•",
            comprehensive_judgment=f"Ï≤òÎ¶¨ Ï§ë Ïò§Î•ò Î∞úÏÉù: {error_message}",
            confidence=0.0,
            processing_time=processing_time,
            template_used="error_template",
            structure_type=request.structure_type,
            reasoning_trace=["Ïò§Î•ò Î∞úÏÉù", error_message],
        )

        # Ïò§Î•ò Claude ÏùëÎãµ ÏÉùÏÑ±
        error_claude_response = ClaudeJudgmentResponse(
            judgment="Ï≤òÎ¶¨ Ï§ë Ïò§Î•ò Î∞úÏÉù",
            confidence=0.0,
            reasoning=error_message,
            emotion_detected="neutral",
            strategy_suggested="cautious",
            processing_time=0.0,
        )

        # Ïò§Î•ò ÌÜµÌï© ÏùëÎãµ ÏÉùÏÑ±
        return FISTClaudeResponse(
            fist_response=error_fist_response,
            claude_response=error_claude_response,
            integrated_judgment=f"ÏãúÏä§ÌÖú Ïò§Î•òÎ°ú Ïù∏Ìïú Ï≤òÎ¶¨ Ïã§Ìå®: {error_message}",
            final_confidence=0.0,
            structure_analysis={"error": error_message},
            template_used="error_template",
            processing_time=processing_time,
        )

    def _update_performance_stats(
        self, fist_response: FISTResponse, processing_time: float, success: bool
    ):
        """ÏÑ±Îä• ÌÜµÍ≥Ñ ÏóÖÎç∞Ïù¥Ìä∏"""

        if success:
            self.performance_stats["successful_fist_requests"] += 1
            self.performance_stats["claude_integration_success"] += 1

            # ÌÖúÌîåÎ¶ø ÏÇ¨Ïö© ÌÜµÍ≥Ñ
            template_id = fist_response.template_id
            self.performance_stats["template_usage"][template_id] = (
                self.performance_stats["template_usage"].get(template_id, 0) + 1
            )

            # Íµ¨Ï°∞ ÏÇ¨Ïö© ÌÜµÍ≥Ñ
            structure_type = fist_response.structure_type.value
            self.performance_stats["structure_usage"][structure_type] = (
                self.performance_stats["structure_usage"].get(structure_type, 0) + 1
            )

        # ÌèâÍ∑† Ï≤òÎ¶¨ ÏãúÍ∞Ñ ÏóÖÎç∞Ïù¥Ìä∏
        total_successful = self.performance_stats["successful_fist_requests"]
        if total_successful > 0:
            current_avg = self.performance_stats["average_processing_time"]
            new_avg = (
                (current_avg * (total_successful - 1)) + processing_time
            ) / total_successful
            self.performance_stats["average_processing_time"] = new_avg

    def get_performance_report(self) -> Dict[str, Any]:
        """ÏÑ±Îä• Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ±"""
        total_requests = max(self.performance_stats["total_fist_requests"], 1)

        return {
            "fist_claude_integration": {
                "total_requests": self.performance_stats["total_fist_requests"],
                "successful_requests": self.performance_stats[
                    "successful_fist_requests"
                ],
                "failed_requests": self.performance_stats["failed_fist_requests"],
                "success_rate": (
                    self.performance_stats["successful_fist_requests"] / total_requests
                )
                * 100,
                "average_processing_time": self.performance_stats[
                    "average_processing_time"
                ],
            },
            "template_usage": self.performance_stats["template_usage"],
            "structure_usage": self.performance_stats["structure_usage"],
            "quality_metrics": self.quality_metrics,
            "claude_integration_success": self.performance_stats[
                "claude_integration_success"
            ],
            "underlying_systems": {
                "fist_engine": self.fist_engine.get_engine_stats(),
                "claude_bridge": self.claude_bridge.get_performance_report(),
            },
        }

    def get_available_templates(self) -> Dict[str, Any]:
        """ÏÇ¨Ïö© Í∞ÄÎä•Ìïú FIST ÌÖúÌîåÎ¶ø Î™©Î°ù Î∞òÌôò"""
        return self.fist_engine.get_available_templates()

    def add_custom_template(self, template: FISTTemplate):
        """ÏÇ¨Ïö©Ïûê Ï†ïÏùò ÌÖúÌîåÎ¶ø Ï∂îÍ∞Ä"""
        self.fist_engine.add_template(template)

    def save_session_data(self, filepath: str = None):
        """ÏÑ∏ÏÖò Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû•"""
        if filepath is None:
            filepath = f"fist_claude_session_{int(time.time())}.json"

        session_data = {
            "session_info": {
                "timestamp": datetime.now().isoformat(),
                "api_mode": self.api_mode,
            },
            "performance_stats": self.performance_stats,
            "quality_metrics": self.quality_metrics,
            "available_templates": self.get_available_templates(),
        }

        try:
            with open(filepath, "w", encoding="utf-8") as f:
                json.dump(session_data, f, ensure_ascii=False, indent=2, default=str)

            print(f"‚úÖ FIST Claude Bridge ÏÑ∏ÏÖò Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû•: {filepath}")
            return filepath

        except Exception as e:
            print(f"‚ùå ÏÑ∏ÏÖò Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû• Ïã§Ìå®: {e}")
            return None


# Ìé∏Ïùò Ìï®ÏàòÎì§
async def quick_fist_claude_judgment(
    text: str, category: str = "decision", api_mode: str = "mock"
) -> FISTClaudeResponse:
    """Îπ†Î•∏ FIST Claude ÌåêÎã®"""
    bridge = FISTClaudeBridge(api_mode=api_mode)
    request = FISTClaudeRequest(
        input_text=text,
        category=TemplateCategory(category),
        structure_type=FISTStructureType.FIST,
    )

    return await bridge.process_fist_request(request)


async def comprehensive_fist_claude_judgment(
    text: str,
    category: str,
    complexity: str = "moderate",
    context: Dict[str, Any] = None,
    api_mode: str = "mock",
) -> FISTClaudeResponse:
    """Ï¢ÖÌï©Ï†ÅÏù∏ FIST Claude ÌåêÎã®"""
    bridge = FISTClaudeBridge(api_mode=api_mode)
    request = FISTClaudeRequest(
        input_text=text,
        category=TemplateCategory(category),
        complexity=TemplateComplexity(complexity),
        context=context or {},
        structure_type=FISTStructureType.FIST,
        selection_strategy=TemplateSelectionStrategy.BEST_MATCH,
    )

    return await bridge.process_fist_request(request)


# ÌÖåÏä§Ìä∏ ÏΩîÎìú
if __name__ == "__main__":
    import asyncio

    async def test_fist_claude_bridge():
        print("üéØ FIST Claude Bridge ÌÖåÏä§Ìä∏ ÏãúÏûë...")

        # Î∏åÎ¶¨ÏßÄ Ï¥àÍ∏∞Ìôî
        bridge = FISTClaudeBridge(api_mode="mock")

        # ÌÖåÏä§Ìä∏ ÏºÄÏù¥Ïä§Îì§
        test_cases = [
            {
                "text": "ÏÉàÎ°úÏö¥ AI ÌîÑÎ°úÏ†ùÌä∏Î•º ÏãúÏûëÌï†ÏßÄ Í≤∞Ï†ïÌï¥Ïïº Ìï©ÎãàÎã§.",
                "category": "decision",
                "complexity": "complex",
                "context": {"budget": "limited", "timeline": "6months"},
            },
            {
                "text": "ÌåÄÏõêÎì§Í≥ºÏùò Í∞àÎì± ÏÉÅÌô©ÏùÑ Ìï¥Í≤∞Ìï¥Ïïº Ìï©ÎãàÎã§.",
                "category": "emotional",
                "complexity": "moderate",
                "context": {"team_size": "5", "conflict_duration": "2weeks"},
            },
            {
                "text": "ÌòÅÏã†Ï†ÅÏù∏ UI/UX ÎîîÏûêÏù∏ ÏïÑÏù¥ÎîîÏñ¥Í∞Ä ÌïÑÏöîÌï©ÎãàÎã§.",
                "category": "creative",
                "complexity": "moderate",
                "context": {
                    "target_users": "young_professionals",
                    "platform": "mobile",
                },
            },
        ]

        for i, test_case in enumerate(test_cases, 1):
            print(f"\nüîç ÌÖåÏä§Ìä∏ {i}: {test_case['text']}")

            request = FISTClaudeRequest(
                input_text=test_case["text"],
                category=TemplateCategory(test_case["category"]),
                complexity=TemplateComplexity(test_case["complexity"]),
                context=test_case["context"],
            )

            response = await bridge.process_fist_request(request)

            print(f"  üéØ ÌÖúÌîåÎ¶ø ÏÇ¨Ïö©: {response.template_used}")
            print(f"  üìä ÏµúÏ¢Ö Ïã†Î¢∞ÎèÑ: {response.final_confidence:.3f}")
            print(f"  üîÑ Ï≤òÎ¶¨ ÏãúÍ∞Ñ: {response.processing_time:.3f}Ï¥à")
            print(f"  üß† ÌÜµÌï© ÌåêÎã®: {response.integrated_judgment[:100]}...")

            # Íµ¨Ï°∞ Î∂ÑÏÑù ÏöîÏïΩ
            structure_analysis = response.structure_analysis
            print(
                f"  üìà Íµ¨Ï°∞ ÏôÑÏÑ±ÎèÑ: {structure_analysis.get('structure_completeness', 0):.3f}"
            )
            print(
                f"  ü§ñ Claude ÌÜµÌï©: {structure_analysis.get('claude_integration', 0):.3f}"
            )

        # ÏÑ±Îä• Î¶¨Ìè¨Ìä∏
        print("\nüìä ÏÑ±Îä• Î¶¨Ìè¨Ìä∏:")
        report = bridge.get_performance_report()
        integration_stats = report["fist_claude_integration"]
        print(f"  Ï¥ù ÏöîÏ≤≠: {integration_stats['total_requests']}")
        print(f"  ÏÑ±Í≥µÎ•†: {integration_stats['success_rate']:.1f}%")
        print(f"  ÌèâÍ∑† Ï≤òÎ¶¨ ÏãúÍ∞Ñ: {integration_stats['average_processing_time']:.3f}Ï¥à")

        # ÌÖúÌîåÎ¶ø ÏÇ¨Ïö© ÌÜµÍ≥Ñ
        print(f"  ÌÖúÌîåÎ¶ø ÏÇ¨Ïö©: {report['template_usage']}")
        print(f"  Íµ¨Ï°∞ ÏÇ¨Ïö©: {report['structure_usage']}")

        # ÏÑ∏ÏÖò Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû•
        saved_file = bridge.save_session_data()
        print(f"\nüíæ ÏÑ∏ÏÖò Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû•: {saved_file}")

    # ÌÖåÏä§Ìä∏ Ïã§Ìñâ
    asyncio.run(test_fist_claude_bridge())
