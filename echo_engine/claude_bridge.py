#!/usr/bin/env python3
"""
ü§ñ Claude Bridge - EchoJudgmentSystem v10 Claude ÌòëÎ†• ÌôïÏû• API

Ïã§ÏãúÍ∞Ñ Claude ÌåêÎã® + Echo ÌåêÎã® + Î≥ëÌï© Î∂ÑÏÑùÏùÑ ÌÜµÌïú Í≥†ÎèÑÌôîÎêú AI ÌåêÎã® Î£®ÌîÑ
"""

import json
import time
from datetime import datetime
from typing import Dict, List, Optional
import asyncio
from dataclasses import dataclass

import aiohttp
from echo_engine.utils.yaml_loader import load_yaml

# --- Îç∞Ïù¥ÌÑ∞ ÌÅ¥ÎûòÏä§ Ï†ïÏùò ---


@dataclass
class ClaudeJudgmentRequest:
    """Claude ÌåêÎã® ÏöîÏ≤≠ Íµ¨Ï°∞"""

    input_text: str
    context: Optional[str] = None
    judgment_type: str = "comprehensive"  # comprehensive, quick, detailed
    include_emotion: bool = True
    include_strategy: bool = True
    previous_judgments: Optional[List[Dict]] = None


@dataclass
class ClaudeJudgmentResponse:
    """Claude ÌåêÎã® ÏùëÎãµ Íµ¨Ï°∞"""

    judgment: str
    confidence: float
    reasoning: str
    emotion_detected: Optional[str] = None
    strategy_suggested: Optional[str] = None
    alternatives: Optional[List[str]] = None
    processing_time: float = 0.0
    timestamp: str = None

    def __post_init__(self):
        if self.timestamp is None:
            self.timestamp = datetime.now().isoformat()


# --- Claude Bridge Î©îÏù∏ ÌÅ¥ÎûòÏä§ ---


class ClaudeBridge:
    """ClaudeÏôÄÏùò ÌòëÎ†• Î∏åÎ¶¨ÏßÄ"""

    def __init__(self, api_mode: str = "direct"):
        """
        Claude Bridge Ï¥àÍ∏∞Ìôî

        Args:
            api_mode: "direct" (Ïã§Ï†ú API) ÎòêÎäî "mock" (ÌÖåÏä§Ìä∏Ïö©)
        """
        self.api_mode = api_mode
        self.session_id = f"claude_bridge_{int(time.time())}"
        self.judgment_history = []
        self.performance_metrics = {
            "total_requests": 0,
            "successful_requests": 0,
            "average_response_time": 0.0,
            "error_count": 0,
        }

        # Claude Î™®Îç∏ Î∞è ÏãúÏä§ÌÖú ÌîÑÎ°¨ÌîÑÌä∏
        self.claude_config = {
            "model": "claude-3-5-sonnet-20241022",
            "max_tokens": 1000,
            "temperature": 0.3,
            "system_prompt": self._get_system_prompt(),
        }

    def _get_system_prompt(self) -> str:
        """ClaudeÎ•º ÏúÑÌïú ÏãúÏä§ÌÖú ÌîÑÎ°¨ÌîÑÌä∏ ÏÉùÏÑ±"""
        return """
ÎãπÏã†ÏùÄ EchoJudgmentSystemÏùò Í≥†Í∏â ÌåêÎã® ÏóîÏßÑÏûÖÎãàÎã§.

Ïó≠Ìï†:
1. ÏÇ¨Ïö©Ïûê ÏûÖÎ†•ÏùÑ Î∂ÑÏÑùÌïòÏó¨ Ï†ïÌôïÌïú ÌåêÎã® Ï†úÍ≥µ
2. Í∞êÏ†ï ÏÉÅÌÉú Î∞è Ï†ÑÎûµÏ†Å Ï†ëÍ∑º Î∞©Ïãù Ï†úÏïà
3. Echo ÌåêÎã®Í∏∞ÏôÄ ÌòëÎ†•ÌïòÏó¨ ÏµúÏ†ÅÏùò Í≤∞Ï†ï ÎèÑÏ∂ú

ÏùëÎãµ ÌòïÏãù:
- judgment: ÌïµÏã¨ ÌåêÎã® (50Ïûê Ïù¥ÎÇ¥)
- confidence: Ïã†Î¢∞ÎèÑ (0.0-1.0)
- reasoning: ÌåêÎã® Í∑ºÍ±∞ (200Ïûê Ïù¥ÎÇ¥)
- emotion_detected: Í∞êÏßÄÎêú Í∞êÏ†ï (joy, sadness, anger, fear, surprise, neutral Ï§ë ÌïòÎÇò)
- strategy_suggested: Ï∂îÏ≤ú Ï†ÑÎûµ (logical, empathetic, creative, cautious Ï§ë ÌïòÎÇò)
- alternatives: ÎåÄÏïà ÌåêÎã® (ÏµúÎåÄ 3Í∞ú)

Í∞ÑÍ≤∞ÌïòÍ≥† Ï†ïÌôïÌïú Î∂ÑÏÑùÏùÑ Ï†úÍ≥µÌï¥Ï£ºÏÑ∏Ïöî.
"""

    async def request_claude_judgment(
        self, request: ClaudeJudgmentRequest
    ) -> ClaudeJudgmentResponse:
        """ClaudeÏóêÍ≤å ÌåêÎã® ÏöîÏ≤≠"""
        start_time = time.time()
        self.performance_metrics["total_requests"] += 1

        try:
            if self.api_mode == "mock":
                response = self._generate_mock_response(request)
            else:
                response = await self._call_claude_api(request)

            processing_time = time.time() - start_time
            response.processing_time = processing_time

            self.performance_metrics["successful_requests"] += 1
            self._update_performance_metrics(processing_time)

            self.judgment_history.append(
                {
                    "request": request,
                    "response": response,
                    "timestamp": datetime.now().isoformat(),
                }
            )

            return response

        except Exception as e:
            self.performance_metrics["error_count"] += 1
            print(f"‚ùå Claude ÌåêÎã® ÏöîÏ≤≠ Ïã§Ìå®: {e}")

            return ClaudeJudgmentResponse(
                judgment="ÌåêÎã® Î∂àÍ∞Ä",
                confidence=0.0,
                reasoning=f"Ï≤òÎ¶¨ Ï§ë Ïò§Î•ò Î∞úÏÉù: {str(e)}",
                emotion_detected="neutral",
                strategy_suggested="cautious",
                processing_time=time.time() - start_time,
            )

    def _generate_mock_response(
        self, request: ClaudeJudgmentRequest
    ) -> ClaudeJudgmentResponse:
        """ÌÖåÏä§Ìä∏Ïö© Î™®Ïùò ÏùëÎãµ ÏÉùÏÑ±"""
        import random

        text = request.input_text.lower()

        # Í∞êÏ†ï Í∞êÏßÄ Î™®Ïùò
        if any(word in text for word in ["Í∏∞ÏÅò", "ÌñâÎ≥µ", "Ï¢ã", "ÏµúÍ≥†"]):
            emotion = "joy"
        elif any(word in text for word in ["Ïä¨ÌîÑ", "Ïö∞Ïö∏", "ÌûòÎì§", "ÏÜçÏÉÅ"]):
            emotion = "sadness"
        elif any(word in text for word in ["Ìôî", "ÏßúÏ¶ù", "Î∂ÑÎÖ∏", "Ïó¥Î∞õ"]):
            emotion = "anger"
        elif any(word in text for word in ["Î¨¥ÏÑú", "Í±±Ï†ï", "Î∂àÏïà", "ÎëêÎ†§"]):
            emotion = "fear"
        elif any(word in text for word in ["ÎÜÄÎùº", "ÏôÄÏö∞", "Ìóê", "ÎåÄÎ∞ï"]):
            emotion = "surprise"
        else:
            emotion = "neutral"

        # Ï†ÑÎûµ Ï†úÏïà Î™®Ïùò
        if any(word in text for word in ["Î∂ÑÏÑù", "ÎÖºÎ¶¨", "Ïù¥ÏÑ±", "Ìï©Î¶¨"]):
            strategy = "logical"
        elif any(word in text for word in ["Í∞êÏ†ï", "Í≥µÍ∞ê", "Ïù¥Ìï¥", "ÎßàÏùå"]):
            strategy = "empathetic"
        elif any(word in text for word in ["Ï∞ΩÏùò", "ÏÉàÎ°úÏö¥", "ÌòÅÏã†", "ÏïÑÏù¥ÎîîÏñ¥"]):
            strategy = "creative"
        else:
            strategy = "cautious"

        judgment_templates = [
            f"{emotion} Í∞êÏ†ïÏù¥ Í∞êÏßÄÎêòÏñ¥ {strategy} Ï†ëÍ∑ºÏù¥ ÌïÑÏöîÌï©ÎãàÎã§",
            f"ÏÉÅÌô© Î∂ÑÏÑù Í≤∞Í≥º {strategy} Ï†ÑÎûµÏùÑ Í∂åÏû•Ìï©ÎãàÎã§",
            f"{emotion} ÏÉÅÌÉú Í≥†Î†§ Ïãú Ïã†Ï§ëÌïú Ï†ëÍ∑ºÏù¥ ÌïÑÏöîÌï©ÎãàÎã§",
        ]

        return ClaudeJudgmentResponse(
            judgment=random.choice(judgment_templates),
            confidence=random.uniform(0.7, 0.95),
            reasoning=f"'{request.input_text}' Î∂ÑÏÑù Í≤∞Í≥º: {emotion} Í∞êÏ†ïÍ≥º {strategy} Ï†ÑÎûµ Í∂åÏû•",
            emotion_detected=emotion,
            strategy_suggested=strategy,
            alternatives=[
                f"ÎåÄÏïà 1: {strategy} Ï†ëÍ∑º Í∞ïÌôî",
                f"ÎåÄÏïà 2: Í∞êÏ†ï Í≥†Î†§ Ïö∞ÏÑ†",
                f"ÎåÄÏïà 3: Îã®Í≥ÑÎ≥Ñ Ï†ëÍ∑º",
            ],
        )

    async def _call_claude_api(
        self, request: ClaudeJudgmentRequest
    ) -> ClaudeJudgmentResponse:
        """Claude API Ïã§Ïó∞Îèô Ìò∏Ï∂ú"""
        claude_api_config = load_yaml("config/claude_config.yaml")["claude"]
        headers = {
            "x-api-key": claude_api_config["api_key"],
            "anthropic-version": "2023-06-01",
            "Content-Type": "application/json",
        }

        payload = {
            "model": claude_api_config["model"],
            "max_tokens": claude_api_config["max_tokens"],
            "temperature": claude_api_config["temperature"],
            "messages": [
                {
                    "role": "user",
                    "content": f"{self.claude_config['system_prompt']}\n\nÏÇ¨Ïö©Ïûê ÏûÖÎ†•:\n{request.input_text}",
                }
            ],
        }

        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    claude_api_config["endpoint"], headers=headers, json=payload
                ) as resp:
                    resp.raise_for_status()
                    result = await resp.json()
                    text = result["content"][0]["text"]

                    return ClaudeJudgmentResponse(
                        judgment=text.strip(),
                        confidence=0.85,  # (ÌååÏã± Í∞ÄÎä•ÌïòÎ©¥ Ïã§Ï†ú Í∞í Ï∂îÏ∂ú)
                        reasoning="Claude API Ïã§ ÏùëÎãµ Í∏∞Î∞ò",
                        emotion_detected="neutral",
                        strategy_suggested="cautious",
                    )
        except Exception as e:
            print(f"‚ùå Claude API Ìò∏Ï∂ú Ïò§Î•ò: {e}")
            raise

    def _update_performance_metrics(self, processing_time: float):
        """ÏÑ±Îä• Î©îÌä∏Î¶≠ ÏóÖÎç∞Ïù¥Ìä∏"""
        current_avg = self.performance_metrics["average_response_time"]
        total_requests = self.performance_metrics["successful_requests"]

        if total_requests == 1:
            self.performance_metrics["average_response_time"] = processing_time
        else:
            self.performance_metrics["average_response_time"] = (
                current_avg * (total_requests - 1) + processing_time
            ) / total_requests

    def get_performance_report(self) -> dict:
        """ÏÑ±Îä• Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ±"""
        success_rate = (
            self.performance_metrics["successful_requests"]
            / max(self.performance_metrics["total_requests"], 1)
        ) * 100

        return {
            "session_id": self.session_id,
            "total_requests": self.performance_metrics["total_requests"],
            "successful_requests": self.performance_metrics["successful_requests"],
            "error_count": self.performance_metrics["error_count"],
            "success_rate": round(success_rate, 2),
            "average_response_time": round(
                self.performance_metrics["average_response_time"], 3
            ),
            "judgments_made": len(self.judgment_history),
            "last_activity": (
                self.judgment_history[-1]["timestamp"]
                if self.judgment_history
                else None
            ),
        }

    def save_session_data(self, filepath: str = None):
        """ÏÑ∏ÏÖò Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû•"""
        if filepath is None:
            filepath = f"claude_bridge_session_{self.session_id}.json"

        session_data = {
            "session_id": self.session_id,
            "config": self.claude_config,
            "performance_metrics": self.performance_metrics,
            "judgment_history": self.judgment_history,
            "saved_at": datetime.now().isoformat(),
        }

        try:
            with open(filepath, "w", encoding="utf-8") as f:
                json.dump(session_data, f, ensure_ascii=False, indent=2, default=str)

            print(f"‚úÖ Claude Bridge ÏÑ∏ÏÖò Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû•: {filepath}")
            return filepath

        except Exception as e:
            print(f"‚ùå ÏÑ∏ÏÖò Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû• Ïã§Ìå®: {e}")
            return None


# --- Ìé∏Ïùò Ìï®ÏàòÎì§ (ÏòµÏÖò) ---


async def quick_claude_judgment(
    text: str, api_mode: str = "direct"
) -> ClaudeJudgmentResponse:
    bridge = ClaudeBridge(api_mode=api_mode)
    request = ClaudeJudgmentRequest(input_text=text, judgment_type="quick")
    return await bridge.request_claude_judgment(request)


async def detailed_claude_judgment(
    text: str, context: str = None, api_mode: str = "direct"
) -> ClaudeJudgmentResponse:
    bridge = ClaudeBridge(api_mode=api_mode)
    request = ClaudeJudgmentRequest(
        input_text=text,
        context=context,
        judgment_type="detailed",
        include_emotion=True,
        include_strategy=True,
    )
    return await bridge.request_claude_judgment(request)


# --- Î©îÏù∏ Ïã§ÌñâÎ∂Ä (ÏßÅÏ†ë ÌÖåÏä§Ìä∏Ïö©) ---

if __name__ == "__main__":
    import asyncio

    async def test_claude_bridge():
        print("ü§ñ Claude Bridge ÌÖåÏä§Ìä∏ ÏãúÏûë...")

        bridge = ClaudeBridge(api_mode="direct")  # Ïã§ APIÎäî direct, Î™®ÏùòÎäî mock

        test_cases = [
            "Ïò§Îäò Ï†ïÎßê Í∏∞ÏÅú ÏùºÏù¥ ÏûàÏóàÏñ¥Ïöî!",
            "Ïñ¥Î†§Ïö¥ Í≤∞Ï†ïÏùÑ ÎÇ¥Î†§Ïïº Ìï¥ÏÑú Í≥†ÎØºÏù¥ ÎßéÏäµÎãàÎã§.",
            "ÌöåÏÇ¨ÏóêÏÑú Ïä§Ìä∏Î†àÏä§Í∞Ä ÎÑàÎ¨¥ Ïã¨Ìï¥Ïöî.",
            "ÏÉàÎ°úÏö¥ ÌîÑÎ°úÏ†ùÌä∏ ÏïÑÏù¥ÎîîÏñ¥Í∞Ä ÏûàÎäîÎç∞ Ïñ¥ÎñªÍ≤å ÏãúÏûëÌï¥Ïïº Ìï†ÍπåÏöî?",
        ]

        for i, test_text in enumerate(test_cases, 1):
            print(f"\nüîç ÌÖåÏä§Ìä∏ {i}: {test_text}")

            request = ClaudeJudgmentRequest(
                input_text=test_text, judgment_type="comprehensive"
            )

            response = await bridge.request_claude_judgment(request)

            print(f"  ÌåêÎã®: {response.judgment}")
            print(f"  Ïã†Î¢∞ÎèÑ: {response.confidence:.2f}")
            print(f"  Í∞êÏ†ï: {response.emotion_detected}")
            print(f"  Ï†ÑÎûµ: {response.strategy_suggested}")
            print(f"  Ï≤òÎ¶¨ÏãúÍ∞Ñ: {response.processing_time:.3f}Ï¥à")

        print("\nüìä ÏÑ±Îä• Î¶¨Ìè¨Ìä∏:")
        report = bridge.get_performance_report()
        for key, value in report.items():
            print(f"  {key}: {value}")

        saved_file = bridge.save_session_data()
        print(f"\nüíæ ÏÑ∏ÏÖò Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû•: {saved_file}")

    asyncio.run(test_claude_bridge())
