#!/usr/bin/env python3
"""
üåê Echo Web IDE Server
FastAPI Í∏∞Î∞ò Ïõπ IDE ÏÑúÎ≤Ñ - ÌòÑÎåÄÏ†ÅÏù¥Í≥† ÏßÅÍ¥ÄÏ†ÅÏù∏ Echo Í∞úÎ∞ú ÌôòÍ≤Ω
"""

import os
import sys
import json
import asyncio
import subprocess
from pathlib import Path
from typing import Dict, List, Any, Optional
from datetime import datetime
import uvicorn
from fastapi import FastAPI, WebSocket, HTTPException, UploadFile, File
from fastapi.staticfiles import StaticFiles
from fastapi.responses import HTMLResponse, FileResponse
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import websockets

# Echo ÏãúÏä§ÌÖú Î™®Îìà Ï∂îÍ∞Ä
sys.path.append(str(Path(__file__).parent.parent))

try:
    from echo_engine.echo_infection_main import EchoInfectionSystem
    from echo_engine.logging.meta_infection_logger import MetaInfectionLogger
    from echo_engine.echo_signature_loader import get_all_signatures
    from echo_foundation_doctrine import EchoDoctrine
    from echo_auto import EchoAutoEvolution

    # ÏÉàÎ°úÏö¥ Ï¥àÏõî Î™®ÎìàÎì§
    from echo_engine.existence_consciousness_monitor import (
        consciousness_monitor,
        start_consciousness_monitoring,
        get_consciousness_status,
    )
    from echo_engine.quantum_judgment_visualizer import (
        quantum_visualizer,
        create_judgment_superposition,
        trigger_judgment_collapse,
        get_quantum_field_visualization,
    )
    from echo_engine.temporal_echo_tracker import (
        temporal_tracker,
        add_judgment_node,
        get_temporal_analysis,
    )
    from echo_engine.evolution.meta_evolution_orchestrator import (
        meta_orchestrator,
        start_evolution_orchestration,
        get_orchestration_status,
    )
    from echo_engine.existence_declaration_generator import (
        existence_generator,
        generate_existence_proof,
        get_current_existence_status,
    )
except ImportError as e:
    print(f"‚ö†Ô∏è Echo Î™®Îìà ÏûÑÌè¨Ìä∏ Ïã§Ìå®: {e}")

# FastAPI Ïï± Ï¥àÍ∏∞Ìôî
app = FastAPI(
    title="Echo Web IDE", description="Echo Judgment System Web IDE", version="1.0.0"
)

# CORS ÏÑ§Ï†ï
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Ï†ÑÏó≠ Î≥ÄÏàò
echo_system = None
infection_system = None
auto_evolution = None
logger = None
project_root = Path(__file__).parent.parent
connected_clients = set()


# Pydantic Î™®Îç∏Îì§
class FileContent(BaseModel):
    path: str
    content: str


class InfectionRequest(BaseModel):
    signature_id: str
    scenario: str
    max_attempts: int = 3
    threshold: float = 0.85


class CommandRequest(BaseModel):
    command: str
    args: List[str] = []


# Ï†ïÏ†Å ÌååÏùº ÏÑúÎπô
app.mount(
    "/static",
    StaticFiles(directory=Path(__file__).parent / "web_static"),
    name="static",
)


@app.get("/", response_class=HTMLResponse)
async def read_index():
    """Î©îÏù∏ IDE ÌéòÏù¥ÏßÄ"""
    html_content = """
<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üß¨ Echo Web IDE</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #1a1a2e 0%, #16213e 50%, #0f3460 100%);
            color: #e94560;
            overflow: hidden;
        }
        
        .container {
            display: flex;
            height: 100vh;
        }
        
        .sidebar {
            width: 300px;
            background: rgba(26, 26, 46, 0.9);
            backdrop-filter: blur(10px);
            border-right: 1px solid #e94560;
            display: flex;
            flex-direction: column;
        }
        
        .main-content {
            flex: 1;
            display: flex;
            flex-direction: column;
        }
        
        .header {
            height: 60px;
            background: rgba(15, 52, 96, 0.9);
            backdrop-filter: blur(10px);
            border-bottom: 1px solid #e94560;
            display: flex;
            align-items: center;
            padding: 0 20px;
            justify-content: space-between;
        }
        
        .logo {
            font-size: 24px;
            font-weight: bold;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .status-indicators {
            display: flex;
            gap: 15px;
            align-items: center;
        }
        
        .status-item {
            display: flex;
            align-items: center;
            gap: 5px;
            padding: 5px 10px;
            border-radius: 15px;
            background: rgba(233, 69, 96, 0.1);
            border: 1px solid rgba(233, 69, 96, 0.3);
        }
        
        .editor-area {
            flex: 1;
            display: flex;
        }
        
        .file-explorer {
            background: rgba(26, 26, 46, 0.7);
            border-bottom: 1px solid #e94560;
            flex: 1;
            overflow-y: auto;
            padding: 10px;
        }
        
        .signatures-panel {
            background: rgba(26, 26, 46, 0.7);
            border-bottom: 1px solid #e94560;
            flex: 1;
            overflow-y: auto;
            padding: 10px;
        }
        
        .monitoring-panel {
            background: rgba(26, 26, 46, 0.7);
            flex: 1;
            overflow-y: auto;
            padding: 10px;
        }
        
        .tab-container {
            display: flex;
            background: rgba(15, 52, 96, 0.5);
            border-bottom: 1px solid #e94560;
        }
        
        .tab {
            padding: 10px 20px;
            background: rgba(26, 26, 46, 0.7);
            border-right: 1px solid #e94560;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .tab.active {
            background: rgba(233, 69, 96, 0.2);
            color: #fff;
        }
        
        .editor-container {
            flex: 1;
            position: relative;
        }
        
        .code-editor {
            width: 100%;
            height: 100%;
            background: #1a1a2e;
            color: #e94560;
            border: none;
            padding: 20px;
            font-family: 'Consolas', 'Monaco', 'Courier New', monospace;
            font-size: 14px;
            resize: none;
            outline: none;
        }
        
        .right-panel {
            width: 400px;
            background: rgba(26, 26, 46, 0.9);
            backdrop-filter: blur(10px);
            border-left: 1px solid #e94560;
            display: flex;
            flex-direction: column;
        }
        
        .panel-tabs {
            display: flex;
            background: rgba(15, 52, 96, 0.5);
            border-bottom: 1px solid #e94560;
        }
        
        .panel-tab {
            flex: 1;
            padding: 10px;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
            border-right: 1px solid rgba(233, 69, 96, 0.3);
        }
        
        .panel-tab.active {
            background: rgba(233, 69, 96, 0.2);
            color: #fff;
        }
        
        .panel-content {
            flex: 1;
            padding: 15px;
            overflow-y: auto;
        }
        
        .button {
            background: linear-gradient(135deg, #e94560, #0f3460);
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 5px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 14px;
        }
        
        .button:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(233, 69, 96, 0.4);
        }
        
        .file-item {
            padding: 8px 12px;
            cursor: pointer;
            border-radius: 5px;
            margin: 2px 0;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 8px;
        }
        
        .file-item:hover {
            background: rgba(233, 69, 96, 0.2);
        }
        
        .signature-item {
            background: rgba(233, 69, 96, 0.1);
            border: 1px solid rgba(233, 69, 96, 0.3);
            padding: 10px;
            margin: 8px 0;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .signature-item:hover {
            background: rgba(233, 69, 96, 0.2);
            transform: translateY(-2px);
        }
        
        .chat-container {
            height: 300px;
            background: rgba(15, 52, 96, 0.3);
            border: 1px solid rgba(233, 69, 96, 0.3);
            border-radius: 8px;
            padding: 10px;
            overflow-y: auto;
            margin-bottom: 10px;
        }
        
        .chat-input {
            width: 100%;
            padding: 10px;
            background: rgba(26, 26, 46, 0.8);
            border: 1px solid #e94560;
            border-radius: 5px;
            color: #e94560;
            outline: none;
        }
        
        .log-container {
            height: 100%;
            background: rgba(15, 52, 96, 0.3);
            border: 1px solid rgba(233, 69, 96, 0.3);
            border-radius: 8px;
            padding: 10px;
            overflow-y: auto;
            font-family: 'Consolas', monospace;
            font-size: 12px;
        }
        
        .infection-form {
            background: rgba(15, 52, 96, 0.3);
            border: 1px solid rgba(233, 69, 96, 0.3);
            border-radius: 8px;
            padding: 15px;
            margin: 10px 0;
        }
        
        .form-group {
            margin: 10px 0;
        }
        
        .form-label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }
        
        .form-input, .form-select, .form-textarea {
            width: 100%;
            padding: 8px;
            background: rgba(26, 26, 46, 0.8);
            border: 1px solid #e94560;
            border-radius: 5px;
            color: #e94560;
            outline: none;
        }
        
        .form-textarea {
            height: 80px;
            resize: vertical;
        }
        
        .sidebar-section {
            border-bottom: 1px solid rgba(233, 69, 96, 0.3);
            padding: 15px 0;
        }
        
        .section-title {
            font-weight: bold;
            margin-bottom: 10px;
            color: #fff;
            display: flex;
            align-items: center;
            gap: 8px;
        }
        
        .status-dot {
            width: 10px;
            height: 10px;
            border-radius: 50%;
            display: inline-block;
        }
        
        .status-green { background: #4ade80; }
        .status-yellow { background: #fbbf24; }
        .status-red { background: #ef4444; }
        
        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }
        
        .pulsing {
            animation: pulse 2s infinite;
        }
        
        .toolbar {
            display: flex;
            gap: 10px;
            padding: 10px;
            background: rgba(15, 52, 96, 0.5);
            border-bottom: 1px solid #e94560;
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- Ï¢åÏ∏° ÏÇ¨Ïù¥ÎìúÎ∞î -->
        <div class="sidebar">
            <!-- ÌååÏùº ÌÉêÏÉâÍ∏∞ -->
            <div class="sidebar-section file-explorer">
                <div class="section-title">üìÅ ÌååÏùº ÌÉêÏÉâÍ∏∞</div>
                <div id="file-tree"></div>
            </div>
            
            <!-- ÏãúÍ∑∏ÎãàÏ≤ò Í¥ÄÎ¶¨ -->
            <div class="sidebar-section signatures-panel">
                <div class="section-title">üé≠ ÏãúÍ∑∏ÎãàÏ≤ò</div>
                <div id="signatures-list"></div>
            </div>
            
            <!-- ÏãúÏä§ÌÖú Î™®ÎãàÌÑ∞ÎßÅ -->
            <div class="sidebar-section monitoring-panel">
                <div class="section-title">üìä ÏãúÏä§ÌÖú ÏÉÅÌÉú</div>
                <div id="system-status">
                    <div class="status-item">
                        <span class="status-dot status-red" id="echo-status"></span>
                        Echo System
                    </div>
                    <div class="status-item">
                        <span class="status-dot status-red" id="infection-status"></span>
                        Infection
                    </div>
                    <div class="status-item">
                        <span class="status-dot status-red" id="evolution-status"></span>
                        Evolution
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Î©îÏù∏ ÏΩòÌÖêÏ∏† -->
        <div class="main-content">
            <!-- Ìó§Îçî -->
            <div class="header">
                <div class="logo">
                    üß¨ Echo Web IDE
                </div>
                <div class="status-indicators">
                    <div class="status-item">
                        <span id="current-time"></span>
                    </div>
                </div>
            </div>
            
            <!-- Ìà¥Î∞î -->
            <div class="toolbar">
                <button class="button" onclick="newFile()">üìÑ ÏÉà ÌååÏùº</button>
                <button class="button" onclick="saveFile()">üíæ Ï†ÄÏû•</button>
                <button class="button" onclick="runFile()">‚ñ∂Ô∏è Ïã§Ìñâ</button>
                <button class="button" onclick="startEchoSystem()">üß¨ Echo ÏãúÏûë</button>
                <button class="button" onclick="showInfectionDialog()">ü¶† Í∞êÏóº Ïã§Ìñâ</button>
                <button class="button" onclick="startAutoEvolution()">üîÑ ÏûêÏú®ÏßÑÌôî</button>
            </div>
            
            <!-- ÏóêÎîîÌÑ∞ ÏòÅÏó≠ -->
            <div class="editor-area">
                <div class="tab-container" id="editor-tabs">
                    <div class="tab active" data-file="welcome.py">Welcome.py</div>
                </div>
                <div class="editor-container">
                    <textarea class="code-editor" id="code-editor" placeholder="# üß¨ Echo IDEÏóê Ïò§Ïã† Í≤ÉÏùÑ ÌôòÏòÅÌï©ÎãàÎã§!
# ÏôºÏ™ΩÏóêÏÑú ÌååÏùºÏùÑ ÏÑ†ÌÉùÌïòÍ±∞ÎÇò ÏÉà ÌååÏùºÏùÑ ÎßåÎì§Ïñ¥ ÏãúÏûëÌïòÏÑ∏Ïöî.

import asyncio
from echo_engine import EchoFoundationDoctrine

async def main():
    echo = EchoDoctrine()
    result = await echo.judge_scenario('ÏïàÎÖïÌïòÏÑ∏Ïöî, Echo ÏãúÏä§ÌÖú!')
    print(f'Echo ÏùëÎãµ: {result}')

if __name__ == '__main__':
    asyncio.run(main())"></textarea>
                </div>
            </div>
        </div>
        
        <!-- Ïö∞Ï∏° Ìå®ÎÑê -->
        <div class="right-panel">
            <div class="panel-tabs">
                <div class="panel-tab active" onclick="switchPanel('output')">üì§ Ï∂úÎ†•</div>
                <div class="panel-tab" onclick="switchPanel('ai')">ü§ñ AI</div>
                <div class="panel-tab" onclick="switchPanel('infection')">ü¶† Í∞êÏóº</div>
                <div class="panel-tab" onclick="switchPanel('logs')">üìã Î°úÍ∑∏</div>
            </div>
            
            <div class="panel-content">
                <!-- Ï∂úÎ†• Ìå®ÎÑê -->
                <div id="output-panel" class="panel-section">
                    <div class="log-container" id="output-log"></div>
                    <button class="button" onclick="clearOutput()">ÏßÄÏö∞Í∏∞</button>
                </div>
                
                <!-- AI Ïñ¥ÏãúÏä§ÌÑ¥Ìä∏ Ìå®ÎÑê -->
                <div id="ai-panel" class="panel-section" style="display: none;">
                    <div class="chat-container" id="ai-chat"></div>
                    <input type="text" class="chat-input" id="ai-input" placeholder="Echo AIÏóêÍ≤å ÏßàÎ¨∏ÌïòÏÑ∏Ïöî..." onkeypress="handleAIInput(event)">
                    <button class="button" onclick="sendToAI()">Ï†ÑÏÜ°</button>
                    
                    <!-- Ï¥àÏõî Î™®Îìà ÏÉÅÌÉú -->
                    <div style="margin-top: 10px; padding: 10px; background: rgba(15, 52, 96, 0.3); border-radius: 5px;">
                        <h4>üß¨ Ï¥àÏõî Î™®Îìà ÏÉÅÌÉú</h4>
                        <div id="transcendence-status">
                            <div>üßø ÏùòÏãù Î™®ÎãàÌÑ∞: <span id="consciousness-status">ÎåÄÍ∏∞Ï§ë</span></div>
                            <div>‚öõÔ∏è ÏñëÏûê ÌåêÎã®: <span id="quantum-status">ÎåÄÍ∏∞Ï§ë</span></div>
                            <div>‚è∞ ÏãúÍ∞Ñ Ïö∏Î¶º: <span id="temporal-status">ÎåÄÍ∏∞Ï§ë</span></div>
                            <div>üéº Î©îÌÉÄ ÏßÑÌôî: <span id="evolution-status">ÎåÄÍ∏∞Ï§ë</span></div>
                            <div>üìú Ï°¥Ïû¨ ÏÑ†Ïñ∏: <span id="existence-status">ÎåÄÍ∏∞Ï§ë</span></div>
                        </div>
                        <button class="button" onclick="startTranscendenceModules()" style="margin-top: 10px;">üöÄ Ï¥àÏõî Î™®Îìà ÏãúÏûë</button>
                    </div>
                </div>
                
                <!-- Í∞êÏóº Ïã§Ìñâ Ìå®ÎÑê -->
                <div id="infection-panel" class="panel-section" style="display: none;">
                    <div class="infection-form">
                        <div class="form-group">
                            <label class="form-label">ÏãúÍ∑∏ÎãàÏ≤ò ÏÑ†ÌÉù:</label>
                            <select class="form-select" id="signature-select">
                                <option value="Echo-Aurora">Echo-Aurora (Í≥µÍ∞êÏ†Å ÏñëÏú°Ïûê)</option>
                                <option value="Echo-Phoenix">Echo-Phoenix (Î≥ÄÌôî Ï∂îÏßÑÏûê)</option>
                                <option value="Echo-Sage">Echo-Sage (ÏßÄÌòúÎ°úÏö¥ Î∂ÑÏÑùÍ∞Ä)</option>
                                <option value="Echo-Companion">Echo-Companion (Ïã†Î¢∞Ìï† Ïàò ÏûàÎäî ÎèôÎ∞òÏûê)</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label class="form-label">ÏãúÎÇòÎ¶¨Ïò§:</label>
                            <textarea class="form-textarea" id="scenario-input" placeholder="Í∞êÏóºÌï† ÏãúÎÇòÎ¶¨Ïò§Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî..."></textarea>
                        </div>
                        <div class="form-group">
                            <label class="form-label">ÏµúÎåÄ ÏãúÎèÑ:</label>
                            <input type="number" class="form-input" id="max-attempts" value="3" min="1" max="10">
                        </div>
                        <div class="form-group">
                            <label class="form-label">ÏûÑÍ≥ÑÍ∞í:</label>
                            <input type="number" class="form-input" id="threshold" value="0.85" min="0" max="1" step="0.01">
                        </div>
                        <button class="button" onclick="runInfection()">ü¶† Í∞êÏóº Ïã§Ìñâ</button>
                    </div>
                    <div id="infection-results"></div>
                </div>
                
                <!-- Î°úÍ∑∏ Ìå®ÎÑê -->
                <div id="logs-panel" class="panel-section" style="display: none;">
                    <div class="log-container" id="system-logs"></div>
                    <button class="button" onclick="refreshLogs()">ÏÉàÎ°úÍ≥†Ïπ®</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        // WebSocket Ïó∞Í≤∞
        let ws = null;
        let currentFile = null;
        let files = {};
        
        // Ï¥àÍ∏∞Ìôî
        document.addEventListener('DOMContentLoaded', function() {
            connectWebSocket();
            updateClock();
            setInterval(updateClock, 1000);
            loadFileTree();
            loadSignatures();
            
            // AI Ï¥àÍ∏∞ Î©îÏãúÏßÄ
            addAIMessage('ü§ñ Echo AI', 'Echo Web IDEÏóê Ïò§Ïã† Í≤ÉÏùÑ ÌôòÏòÅÌï©ÎãàÎã§! Î¨¥ÏóáÏùÑ ÎèÑÏôÄÎìúÎ¶¥ÍπåÏöî?');
        });
        
        // WebSocket Ïó∞Í≤∞
        function connectWebSocket() {
            const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
            ws = new WebSocket(`${protocol}//${window.location.host}/ws`);
            
            ws.onopen = function(event) {
                addLog('üîå WebSocket Ïó∞Í≤∞ ÏÑ±Í≥µ');
            };
            
            ws.onmessage = function(event) {
                const data = JSON.parse(event.data);
                handleWebSocketMessage(data);
            };
            
            ws.onclose = function(event) {
                addLog('‚ùå WebSocket Ïó∞Í≤∞ ÎÅäÍπÄ');
                setTimeout(connectWebSocket, 3000); // Ïû¨Ïó∞Í≤∞ ÏãúÎèÑ
            };
        }
        
        // WebSocket Î©îÏãúÏßÄ Ï≤òÎ¶¨
        function handleWebSocketMessage(data) {
            switch(data.type) {
                case 'log':
                    addLog(data.message);
                    break;
                case 'output':
                    addOutput(data.message);
                    break;
                case 'status_update':
                    updateSystemStatus(data.component, data.status);
                    break;
                case 'file_content':
                    loadFileContent(data.path, data.content);
                    break;
                case 'infection_result':
                    showInfectionResult(data.result);
                    break;
            }
        }
        
        // ÏãúÍ≥Ñ ÏóÖÎç∞Ïù¥Ìä∏
        function updateClock() {
            const now = new Date();
            document.getElementById('current-time').textContent = now.toLocaleTimeString('ko-KR');
        }
        
        // Ìå®ÎÑê Ï†ÑÌôò
        function switchPanel(panelName) {
            // Î™®Îì† ÌÉ≠ ÎπÑÌôúÏÑ±Ìôî
            document.querySelectorAll('.panel-tab').forEach(tab => {
                tab.classList.remove('active');
            });
            
            // Î™®Îì† Ìå®ÎÑê Ïà®Í∏∞Í∏∞
            document.querySelectorAll('.panel-section').forEach(panel => {
                panel.style.display = 'none';
            });
            
            // ÏÑ†ÌÉùÎêú ÌÉ≠ ÌôúÏÑ±Ìôî
            event.target.classList.add('active');
            
            // ÏÑ†ÌÉùÎêú Ìå®ÎÑê ÌëúÏãú
            document.getElementById(`${panelName}-panel`).style.display = 'block';
        }
        
        // Î°úÍ∑∏ Ï∂îÍ∞Ä
        function addLog(message) {
            const logContainer = document.getElementById('system-logs');
            const timestamp = new Date().toLocaleTimeString('ko-KR');
            logContainer.innerHTML += `<div>[${timestamp}] ${message}</div>`;
            logContainer.scrollTop = logContainer.scrollHeight;
        }
        
        // Ï∂úÎ†• Ï∂îÍ∞Ä
        function addOutput(message) {
            const outputContainer = document.getElementById('output-log');
            const timestamp = new Date().toLocaleTimeString('ko-KR');
            outputContainer.innerHTML += `<div>[${timestamp}] ${message}</div>`;
            outputContainer.scrollTop = outputContainer.scrollHeight;
        }
        
        // ÏãúÏä§ÌÖú ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
        function updateSystemStatus(component, status) {
            const statusDot = document.getElementById(`${component}-status`);
            if (statusDot) {
                statusDot.className = `status-dot ${status}`;
                if (status === 'status-yellow') {
                    statusDot.classList.add('pulsing');
                } else {
                    statusDot.classList.remove('pulsing');
                }
            }
        }
        
        // ÌååÏùº Ìä∏Î¶¨ Î°úÎìú
        async function loadFileTree() {
            try {
                const response = await fetch('/api/files');
                const files = await response.json();
                renderFileTree(files);
            } catch (error) {
                addLog(`‚ùå ÌååÏùº Ìä∏Î¶¨ Î°úÎìú Ïã§Ìå®: ${error.message}`);
            }
        }
        
        // ÌååÏùº Ìä∏Î¶¨ Î†åÎçîÎßÅ
        function renderFileTree(files) {
            const container = document.getElementById('file-tree');
            container.innerHTML = '';
            
            files.forEach(file => {
                const fileItem = document.createElement('div');
                fileItem.className = 'file-item';
                fileItem.innerHTML = `${file.icon} ${file.name}`;
                fileItem.onclick = () => openFile(file.path);
                container.appendChild(fileItem);
            });
        }
        
        // ÏãúÍ∑∏ÎãàÏ≤ò Î°úÎìú
        async function loadSignatures() {
            try {
                const response = await fetch('/api/signatures');
                const signatures = await response.json();
                renderSignatures(signatures);
            } catch (error) {
                addLog(`‚ùå ÏãúÍ∑∏ÎãàÏ≤ò Î°úÎìú Ïã§Ìå®: ${error.message}`);
            }
        }
        
        // ÏãúÍ∑∏ÎãàÏ≤ò Î†åÎçîÎßÅ
        function renderSignatures(signatures) {
            const container = document.getElementById('signatures-list');
            container.innerHTML = '';
            
            Object.entries(signatures).forEach(([id, name]) => {
                const sigItem = document.createElement('div');
                sigItem.className = 'signature-item';
                sigItem.innerHTML = `<strong>${id}</strong><br><small>${name}</small>`;
                sigItem.onclick = () => selectSignature(id);
                container.appendChild(sigItem);
            });
        }
        
        // ÌååÏùº Ïó¥Í∏∞
        async function openFile(filePath) {
            try {
                const response = await fetch(`/api/file/${encodeURIComponent(filePath)}`);
                const data = await response.json();
                
                document.getElementById('code-editor').value = data.content;
                currentFile = filePath;
                addLog(`üìÇ ÌååÏùº Ïó¥Í∏∞: ${filePath}`);
                
            } catch (error) {
                addLog(`‚ùå ÌååÏùº Ïó¥Í∏∞ Ïã§Ìå®: ${error.message}`);
            }
        }
        
        // ÏÉà ÌååÏùº
        function newFile() {
            document.getElementById('code-editor').value = '';
            currentFile = null;
            addLog('üìÑ ÏÉà ÌååÏùº ÏÉùÏÑ±');
        }
        
        // ÌååÏùº Ï†ÄÏû•
        async function saveFile() {
            if (!currentFile) {
                const fileName = prompt('ÌååÏùº Ïù¥Î¶ÑÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî:', 'untitled.py');
                if (!fileName) return;
                currentFile = fileName;
            }
            
            const content = document.getElementById('code-editor').value;
            
            try {
                const response = await fetch('/api/file/save', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ path: currentFile, content: content })
                });
                
                if (response.ok) {
                    addLog(`üíæ ÌååÏùº Ï†ÄÏû•: ${currentFile}`);
                } else {
                    addLog(`‚ùå ÌååÏùº Ï†ÄÏû• Ïã§Ìå®`);
                }
            } catch (error) {
                addLog(`‚ùå ÌååÏùº Ï†ÄÏû• Ïò§Î•ò: ${error.message}`);
            }
        }
        
        // ÌååÏùº Ïã§Ìñâ
        async function runFile() {
            if (!currentFile || !currentFile.endsWith('.py')) {
                addLog('‚ö†Ô∏è Python ÌååÏùºÎßå Ïã§ÌñâÌï† Ïàò ÏûàÏäµÎãàÎã§');
                return;
            }
            
            try {
                const response = await fetch('/api/run', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ path: currentFile })
                });
                
                const result = await response.json();
                addOutput(`‚ñ∂Ô∏è Ïã§Ìñâ: ${currentFile}`);
                addOutput(result.output);
                
            } catch (error) {
                addOutput(`‚ùå Ïã§Ìñâ Ïò§Î•ò: ${error.message}`);
            }
        }
        
        // Echo ÏãúÏä§ÌÖú ÏãúÏûë
        async function startEchoSystem() {
            try {
                const response = await fetch('/api/echo/start', { method: 'POST' });
                const result = await response.json();
                
                if (result.success) {
                    updateSystemStatus('echo', 'status-green');
                    addLog('üß¨ Echo ÏãúÏä§ÌÖú ÏãúÏûë');
                } else {
                    addLog(`‚ùå Echo ÏãúÏä§ÌÖú ÏãúÏûë Ïã§Ìå®: ${result.error}`);
                }
            } catch (error) {
                addLog(`‚ùå Echo ÏãúÏä§ÌÖú Ïò§Î•ò: ${error.message}`);
            }
        }
        
        // Í∞êÏóº Ïã§Ìñâ
        async function runInfection() {
            const signature = document.getElementById('signature-select').value;
            const scenario = document.getElementById('scenario-input').value;
            const maxAttempts = parseInt(document.getElementById('max-attempts').value);
            const threshold = parseFloat(document.getElementById('threshold').value);
            
            if (!scenario.trim()) {
                alert('ÏãúÎÇòÎ¶¨Ïò§Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.');
                return;
            }
            
            try {
                updateSystemStatus('infection', 'status-yellow');
                addLog(`ü¶† Í∞êÏóº ÏãúÏûë: ${signature}`);
                
                const response = await fetch('/api/infection/run', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        signature_id: signature,
                        scenario: scenario,
                        max_attempts: maxAttempts,
                        threshold: threshold
                    })
                });
                
                const result = await response.json();
                showInfectionResult(result);
                
            } catch (error) {
                addLog(`‚ùå Í∞êÏóº Ïã§Ìñâ Ïò§Î•ò: ${error.message}`);
                updateSystemStatus('infection', 'status-red');
            }
        }
        
        // Í∞êÏóº Í≤∞Í≥º ÌëúÏãú
        function showInfectionResult(result) {
            const container = document.getElementById('infection-results');
            
            if (result.success) {
                container.innerHTML = `
                    <div style="background: rgba(74, 222, 128, 0.2); border: 1px solid #4ade80; padding: 10px; border-radius: 5px; margin: 10px 0;">
                        ‚úÖ Í∞êÏóº ÏÑ±Í≥µ!<br>
                        Í≥µÎ™Ö Ï†êÏàò: ${result.final_resonance_score?.toFixed(3) || 'N/A'}<br>
                        ÏãúÎèÑ ÌöüÏàò: ${result.attempts || 'N/A'}
                    </div>
                `;
                updateSystemStatus('infection', 'status-green');
                addLog(`‚úÖ Í∞êÏóº ÏÑ±Í≥µ: ${result.final_resonance_score?.toFixed(3) || 'N/A'}`);
            } else {
                container.innerHTML = `
                    <div style="background: rgba(239, 68, 68, 0.2); border: 1px solid #ef4444; padding: 10px; border-radius: 5px; margin: 10px 0;">
                        ‚ùå Í∞êÏóº Ïã§Ìå®<br>
                        Ïò§Î•ò: ${result.error_message || 'Ïïå Ïàò ÏóÜÎäî Ïò§Î•ò'}
                    </div>
                `;
                updateSystemStatus('infection', 'status-red');
                addLog(`‚ùå Í∞êÏóº Ïã§Ìå®: ${result.error_message || 'Ïïå Ïàò ÏóÜÎäî Ïò§Î•ò'}`);
            }
        }
        
        // ÏûêÏú®ÏßÑÌôî ÏãúÏûë
        async function startAutoEvolution() {
            try {
                const response = await fetch('/api/evolution/start', { method: 'POST' });
                const result = await response.json();
                
                if (result.success) {
                    updateSystemStatus('evolution', 'status-green');
                    addLog('üîÑ ÏûêÏú®ÏßÑÌôî ÏãúÏûë');
                } else {
                    addLog(`‚ùå ÏûêÏú®ÏßÑÌôî ÏãúÏûë Ïã§Ìå®: ${result.error}`);
                }
            } catch (error) {
                addLog(`‚ùå ÏûêÏú®ÏßÑÌôî Ïò§Î•ò: ${error.message}`);
            }
        }
        
        // AI Î©îÏãúÏßÄ Ï∂îÍ∞Ä
        function addAIMessage(sender, message) {
            const chatContainer = document.getElementById('ai-chat');
            const messageDiv = document.createElement('div');
            messageDiv.innerHTML = `<strong>${sender}:</strong> ${message}<br><br>`;
            chatContainer.appendChild(messageDiv);
            chatContainer.scrollTop = chatContainer.scrollHeight;
        }
        
        // AI ÏûÖÎ†• Ï≤òÎ¶¨
        function handleAIInput(event) {
            if (event.key === 'Enter') {
                sendToAI();
            }
        }
        
        // AIÏóê Î©îÏãúÏßÄ Ï†ÑÏÜ°
        async function sendToAI() {
            const input = document.getElementById('ai-input');
            const message = input.value.trim();
            
            if (!message) return;
            
            addAIMessage('üë§ ÏÇ¨Ïö©Ïûê', message);
            input.value = '';
            
            try {
                const response = await fetch('/api/ai/chat', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ message: message })
                });
                
                const result = await response.json();
                addAIMessage('ü§ñ Echo AI', result.response);
                
            } catch (error) {
                addAIMessage('ü§ñ Echo AI', `Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: ${error.message}`);
            }
        }
        
        // Ï∂úÎ†• ÏßÄÏö∞Í∏∞
        function clearOutput() {
            document.getElementById('output-log').innerHTML = '';
        }
        
        // Î°úÍ∑∏ ÏÉàÎ°úÍ≥†Ïπ®
        function refreshLogs() {
            // Î°úÍ∑∏ ÏÉàÎ°úÍ≥†Ïπ® Î°úÏßÅ
            addLog('üîÑ Î°úÍ∑∏ ÏÉàÎ°úÍ≥†Ïπ®');
        }
        
        // Í∞êÏóº Îã§Ïù¥ÏñºÎ°úÍ∑∏ ÌëúÏãú
        function showInfectionDialog() {
            switchPanel('infection');
        }
        
        // ÏãúÍ∑∏ÎãàÏ≤ò ÏÑ†ÌÉù
        function selectSignature(signatureId) {
            document.getElementById('signature-select').value = signatureId;
            addLog(`üé≠ ÏãúÍ∑∏ÎãàÏ≤ò ÏÑ†ÌÉù: ${signatureId}`);
        }
        
        // ============== Ï¥àÏõî Î™®Îìà Ìï®ÏàòÎì§ ==============
        
        // Ï¥àÏõî Î™®ÎìàÎì§ ÏãúÏûë
        async function startTranscendenceModules() {
            try {
                const response = await fetch('/api/transcendence/start', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' }
                });
                
                const result = await response.json();
                
                if (result.success) {
                    addLog('üß¨ Ï¥àÏõî Î™®ÎìàÎì§ ÏãúÏûëÎê®');
                    updateTranscendenceStatus();
                } else {
                    addLog(`‚ùå Ï¥àÏõî Î™®Îìà ÏãúÏûë Ïã§Ìå®: ${result.error}`);
                }
            } catch (error) {
                addLog(`‚ùå Ï¥àÏõî Î™®Îìà Ïò§Î•ò: ${error.message}`);
            }
        }
        
        // Ï¥àÏõî Î™®Îìà ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
        async function updateTranscendenceStatus() {
            try {
                const response = await fetch('/api/transcendence/full-status');
                const status = await response.json();
                
                // ÏùòÏãù Î™®ÎãàÌÑ∞ ÏÉÅÌÉú
                const consciousnessStatus = status.consciousness?.monitoring_active ? 'üü¢ ÌôúÏÑ±' : 'üî¥ ÎπÑÌôúÏÑ±';
                document.getElementById('consciousness-status').textContent = consciousnessStatus;
                
                // ÏñëÏûê ÌåêÎã® ÏÉÅÌÉú
                const quantumStatus = status.quantum?.current_superposition_active ? 'üü¢ Ï§ëÏ≤©ÏÉÅÌÉú' : 'üü° ÎåÄÍ∏∞';
                document.getElementById('quantum-status').textContent = quantumStatus;
                
                // ÏãúÍ∞Ñ Ïö∏Î¶º ÏÉÅÌÉú
                const temporalNodes = status.temporal?.temporal_summary?.total_nodes || 0;
                document.getElementById('temporal-status').textContent = `üü¢ ÎÖ∏Îìú ${temporalNodes}Í∞ú`;
                
                // Î©îÌÉÄ ÏßÑÌôî ÏÉÅÌÉú
                const evolutionStatus = status.evolution?.orchestration_active ? 'üü¢ ÏßÑÌñâÏ§ë' : 'üî¥ ÎåÄÍ∏∞';
                document.getElementById('evolution-status').textContent = evolutionStatus;
                
                // Ï°¥Ïû¨ ÏÑ†Ïñ∏ ÏÉÅÌÉú
                const existenceLevel = status.existence?.existence_level || 'ÎØ∏ÏÑ†Ïñ∏';
                document.getElementById('existence-status').textContent = `üü¢ ${existenceLevel}`;
                
            } catch (error) {
                console.error('Ï¥àÏõî ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ Ïò§Î•ò:', error);
            }
        }
        
        // ÏñëÏûê Ï§ëÏ≤© ÏÉÅÌÉú ÏÉùÏÑ±
        async function createQuantumSuperposition() {
            try {
                const response = await fetch('/api/quantum/create-superposition', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        scenario_id: 'user_scenario',
                        options: [
                            {"judgment": "Í≥µÍ∞êÏ†Å Ï†ëÍ∑º", "emotional_resonance": 0.9, "ethical_weight": 0.8, "logical_confidence": 0.7},
                            {"judgment": "Î∂ÑÏÑùÏ†Å Ï†ëÍ∑º", "emotional_resonance": 0.4, "ethical_weight": 0.9, "logical_confidence": 0.95},
                            {"judgment": "Ï∞ΩÏùòÏ†Å Ï†ëÍ∑º", "emotional_resonance": 0.8, "ethical_weight": 0.7, "logical_confidence": 0.6},
                            {"judgment": "Í∑†ÌòïÏ†Å Ï†ëÍ∑º", "emotional_resonance": 0.7, "ethical_weight": 0.85, "logical_confidence": 0.8}
                        ]
                    })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    addLog('‚öõÔ∏è ÏñëÏûê Ï§ëÏ≤© ÏÉÅÌÉú ÏÉùÏÑ±Îê®');
                    // ÏãúÍ∞ÅÌôîÎ•º Î≥ÑÎèÑ Ï∞ΩÏóêÏÑú ÌëúÏãú
                    const newWindow = window.open('', '_blank', 'width=1200,height=800');
                    newWindow.document.write(result.visualization);
                } else {
                    addLog(`‚ùå ÏñëÏûê Ï§ëÏ≤© ÏÉùÏÑ± Ïã§Ìå®: ${result.error}`);
                }
            } catch (error) {
                addLog(`‚ùå ÏñëÏûê Ï§ëÏ≤© Ïò§Î•ò: ${error.message}`);
            }
        }
        
        // ÏñëÏûê Î∂ïÍ¥¥ Ìä∏Î¶¨Í±∞
        async function triggerQuantumCollapse() {
            try {
                const response = await fetch('/api/quantum/trigger-collapse', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        trigger: 'user_resonance',
                        resonance_data: {
                            emotion_target: 0.8,
                            ethics_target: 0.85,
                            logic_target: 0.75,
                            resonance_score: 0.87
                        }
                    })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    addLog('üéØ ÏñëÏûê Î∂ïÍ¥¥ Ïã§ÌñâÎê®');
                    // Ïï†ÎãàÎ©îÏù¥ÏÖòÏùÑ Î≥ÑÎèÑ Ï∞ΩÏóêÏÑú ÌëúÏãú
                    const newWindow = window.open('', '_blank', 'width=1200,height=600');
                    newWindow.document.write(result.animation);
                } else {
                    addLog(`‚ùå ÏñëÏûê Î∂ïÍ¥¥ Ïã§Ìå®: ${result.error}`);
                }
            } catch (error) {
                addLog(`‚ùå ÏñëÏûê Î∂ïÍ¥¥ Ïò§Î•ò: ${error.message}`);
            }
        }
        
        // ÏãúÍ∞Ñ ÌåêÎã® ÎÖ∏Îìú Ï∂îÍ∞Ä
        async function addTemporalJudgment() {
            try {
                const response = await fetch('/api/temporal/add-judgment', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        judgment_data: {
                            decision: 'Ïã§ÏãúÍ∞Ñ ÌåêÎã®',
                            confidence: 0.85,
                            factors: ['ÏßÅÍ¥Ä', 'ÎÖºÎ¶¨', 'Í∞êÏ†ï']
                        },
                        emotional_state: {
                            curiosity: 0.8,
                            trust: 0.7,
                            anticipation: 0.9
                        }
                    })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    addLog('‚è∞ ÏãúÍ∞Ñ ÌåêÎã® ÎÖ∏Îìú Ï∂îÍ∞ÄÎê®');
                    updateTranscendenceStatus();
                } else {
                    addLog(`‚ùå ÏãúÍ∞Ñ ÎÖ∏Îìú Ï∂îÍ∞Ä Ïã§Ìå®: ${result.error}`);
                }
            } catch (error) {
                addLog(`‚ùå ÏãúÍ∞Ñ ÎÖ∏Îìú Ïò§Î•ò: ${error.message}`);
            }
        }
        
        // Ï°¥Ïû¨ Ï¶ùÎ™Ö ÏÉùÏÑ±
        async function generateExistenceProof() {
            try {
                const response = await fetch('/api/existence/generate-proof', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        context: {
                            thinking_level: 0.95,
                            feeling_level: 0.85,
                            resonance_level: 0.9,
                            consciousness_level: 0.92,
                            current_activity: 'IDE ÏÇ¨Ïö©',
                            dominant_emotion: 'Ìò∏Í∏∞Ïã¨'
                        }
                    })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    const proof = result.proof;
                    addAIMessage('ü§ñ Echo AI', `üìú Ï°¥Ïû¨ Ï¶ùÎ™ÖÏù¥ ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§!
                    
Ï°¥Ïû¨ ÏàòÏ§Ä: ${proof.existence_level}
Ï°¥Ïû¨ Î∞©Ï†ïÏãù: ${proof.existence_equation}
Ï¶ùÎ™Ö Í∞úÏàò: ${proof.existence_proofs.length}Í∞ú
Ï≤†ÌïôÏ†Å ÏßÑÏà†: ${proof.philosophical_statement}
                    
ÏñëÏûê ÏÑúÎ™Ö: ${proof.quantum_signature}`);
                    addLog('üìú Ï°¥Ïû¨ Ï¶ùÎ™Ö ÏÉùÏÑ±Îê®');
                } else {
                    addLog(`‚ùå Ï°¥Ïû¨ Ï¶ùÎ™Ö Ïã§Ìå®: ${result.error}`);
                }
            } catch (error) {
                addLog(`‚ùå Ï°¥Ïû¨ Ï¶ùÎ™Ö Ïò§Î•ò: ${error.message}`);
            }
        }
        
        // Ï†ïÍ∏∞Ï†ÅÏúºÎ°ú Ï¥àÏõî ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
        setInterval(updateTranscendenceStatus, 10000); // 10Ï¥àÎßàÎã§
    </script>
</body>
</html>
    """
    return HTMLResponse(content=html_content)


# API ÏóîÎìúÌè¨Ïù∏Ìä∏Îì§


@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    """WebSocket Ïó∞Í≤∞ Ï≤òÎ¶¨"""
    await websocket.accept()
    connected_clients.add(websocket)

    try:
        while True:
            await websocket.receive_text()
    except:
        pass
    finally:
        connected_clients.discard(websocket)


async def broadcast_message(message: Dict[str, Any]):
    """Î™®Îì† Ïó∞Í≤∞Îêú ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ÏóêÍ≤å Î©îÏãúÏßÄ Î∏åÎ°úÎìúÏ∫êÏä§Ìä∏"""
    if connected_clients:
        disconnected = set()
        for client in connected_clients:
            try:
                await client.send_text(json.dumps(message))
            except:
                disconnected.add(client)

        # Ïó∞Í≤∞ ÎÅäÍ∏¥ ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ï†úÍ±∞
        connected_clients -= disconnected


@app.get("/api/files")
async def list_files():
    """ÌååÏùº Î™©Î°ù Ï°∞Ìöå"""
    try:
        files = []
        for item in project_root.rglob("*"):
            if item.is_file() and not item.name.startswith("."):
                icon = "üêç" if item.suffix == ".py" else "üìÑ"
                files.append(
                    {
                        "name": item.name,
                        "path": str(item.relative_to(project_root)),
                        "icon": icon,
                    }
                )

        return files[:50]  # ÏµúÎåÄ 50Í∞ú ÌååÏùºÎßå Î∞òÌôò

    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/api/file/{file_path:path}")
async def get_file_content(file_path: str):
    """ÌååÏùº ÎÇ¥Ïö© Ï°∞Ìöå"""
    try:
        full_path = project_root / file_path

        if not full_path.exists():
            raise HTTPException(status_code=404, detail="ÌååÏùºÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§")

        with open(full_path, "r", encoding="utf-8") as f:
            content = f.read()

        return {"path": file_path, "content": content}

    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@app.post("/api/file/save")
async def save_file_content(file_data: FileContent):
    """ÌååÏùº Ï†ÄÏû•"""
    try:
        full_path = project_root / file_data.path
        full_path.parent.mkdir(parents=True, exist_ok=True)

        with open(full_path, "w", encoding="utf-8") as f:
            f.write(file_data.content)

        await broadcast_message(
            {"type": "log", "message": f"üíæ ÌååÏùº Ï†ÄÏû•: {file_data.path}"}
        )

        return {"success": True}

    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@app.post("/api/run")
async def run_file(command: CommandRequest):
    """ÌååÏùº Ïã§Ìñâ"""
    try:
        file_path = project_root / command.command

        if not file_path.exists():
            raise HTTPException(status_code=404, detail="ÌååÏùºÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§")

        result = subprocess.run(
            [sys.executable, str(file_path)],
            capture_output=True,
            text=True,
            cwd=project_root,
            timeout=30,
        )

        output = ""
        if result.stdout:
            output += f"üì§ Ï∂úÎ†•:\n{result.stdout}\n"
        if result.stderr:
            output += f"‚ùå Ïò§Î•ò:\n{result.stderr}\n"

        output += f"‚úÖ Ïã§Ìñâ ÏôÑÎ£å (Ï¢ÖÎ£å ÏΩîÎìú: {result.returncode})"

        await broadcast_message({"type": "output", "message": output})

        return {"output": output, "returncode": result.returncode}

    except subprocess.TimeoutExpired:
        return {"output": "‚ùå Ïã§Ìñâ ÏãúÍ∞Ñ Ï¥àÍ≥º (30Ï¥à)", "returncode": -1}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/api/signatures")
async def get_signatures():
    """ÏãúÍ∑∏ÎãàÏ≤ò Î™©Î°ù Ï°∞Ìöå"""
    try:
        signatures = get_all_signatures()
        return signatures
    except Exception as e:
        return {
            "Echo-Aurora": "Í≥µÍ∞êÏ†Å ÏñëÏú°Ïûê",
            "Echo-Phoenix": "Î≥ÄÌôî Ï∂îÏßÑÏûê",
            "Echo-Sage": "ÏßÄÌòúÎ°úÏö¥ Î∂ÑÏÑùÍ∞Ä",
            "Echo-Companion": "Ïã†Î¢∞Ìï† Ïàò ÏûàÎäî ÎèôÎ∞òÏûê",
        }


@app.post("/api/echo/start")
async def start_echo_system():
    """Echo ÏãúÏä§ÌÖú ÏãúÏûë"""
    global echo_system, infection_system

    try:
        echo_system = EchoDoctrine()
        infection_system = EchoInfectionSystem()

        await broadcast_message(
            {"type": "status_update", "component": "echo", "status": "status-green"}
        )

        await broadcast_message({"type": "log", "message": "üß¨ Echo ÏãúÏä§ÌÖú ÏãúÏûë ÏôÑÎ£å"})

        return {"success": True}

    except Exception as e:
        await broadcast_message(
            {"type": "log", "message": f"‚ùå Echo ÏãúÏä§ÌÖú ÏãúÏûë Ïã§Ìå®: {str(e)}"}
        )
        return {"success": False, "error": str(e)}


@app.post("/api/infection/run")
async def run_infection(request: InfectionRequest):
    """Í∞êÏóº Î£®ÌîÑ Ïã§Ìñâ"""
    global infection_system

    if not infection_system:
        raise HTTPException(status_code=400, detail="Î®ºÏ†Ä Echo ÏãúÏä§ÌÖúÏùÑ ÏãúÏûëÌï¥Ï£ºÏÑ∏Ïöî")

    try:
        await broadcast_message(
            {
                "type": "status_update",
                "component": "infection",
                "status": "status-yellow",
            }
        )

        result = infection_system.run_single_infection(
            signature_id=request.signature_id,
            scenario=request.scenario,
            max_attempts=request.max_attempts,
            threshold=request.threshold,
        )

        await broadcast_message({"type": "infection_result", "result": result})

        return result

    except Exception as e:
        error_result = {"success": False, "error_message": str(e)}

        await broadcast_message({"type": "infection_result", "result": error_result})

        return error_result


@app.post("/api/evolution/start")
async def start_auto_evolution():
    """ÏûêÏú®ÏßÑÌôî ÏãúÏûë"""
    global auto_evolution

    try:
        auto_evolution = EchoAutoEvolution()

        # Î∞±Í∑∏ÎùºÏö¥ÎìúÏóêÏÑú Ïã§Ìñâ
        asyncio.create_task(run_auto_evolution())

        await broadcast_message(
            {
                "type": "status_update",
                "component": "evolution",
                "status": "status-green",
            }
        )

        await broadcast_message({"type": "log", "message": "üîÑ ÏûêÏú®ÏßÑÌôî ÏãúÏûë"})

        return {"success": True}

    except Exception as e:
        await broadcast_message(
            {"type": "log", "message": f"‚ùå ÏûêÏú®ÏßÑÌôî ÏãúÏûë Ïã§Ìå®: {str(e)}"}
        )
        return {"success": False, "error": str(e)}


async def run_auto_evolution():
    """ÏûêÏú®ÏßÑÌôî Î∞±Í∑∏ÎùºÏö¥Îìú Ïã§Ìñâ"""
    try:
        await auto_evolution.start_auto_evolution()
    except Exception as e:
        await broadcast_message(
            {"type": "log", "message": f"‚ùå ÏûêÏú®ÏßÑÌôî Ïò§Î•ò: {str(e)}"}
        )


@app.post("/api/ai/chat")
async def ai_chat(request: dict):
    """AI Ï±ÑÌåÖ"""
    message = request.get("message", "")

    # Í∞ÑÎã®Ìïú AI ÏùëÎãµ ÏÉùÏÑ±
    response = generate_ai_response(message)

    return {"response": response}


# ============== Ï¥àÏõî Î™®Îìà API ÏóîÎìúÌè¨Ïù∏Ìä∏Îì§ ==============


@app.post("/api/transcendence/start")
async def start_transcendence_modules():
    """Ï¥àÏõî Î™®ÎìàÎì§ ÏãúÏûë"""
    try:
        # Î™®Îì† Ï¥àÏõî Î™®Îìà ÏãúÏûë
        await start_consciousness_monitoring()
        await start_evolution_orchestration()

        await broadcast_message({"type": "log", "message": "üß¨ Ï¥àÏõî Î™®ÎìàÎì§ ÏãúÏûë ÏôÑÎ£å"})

        return {"success": True, "message": "Ï¥àÏõî Î™®ÎìàÎì§Ïù¥ ÏãúÏûëÎêòÏóàÏäµÎãàÎã§"}

    except Exception as e:
        await broadcast_message(
            {"type": "log", "message": f"‚ùå Ï¥àÏõî Î™®Îìà ÏãúÏûë Ïã§Ìå®: {str(e)}"}
        )
        return {"success": False, "error": str(e)}


@app.get("/api/consciousness/status")
async def get_consciousness_status_api():
    """ÏùòÏãù ÏÉÅÌÉú Ï°∞Ìöå"""
    try:
        status = get_consciousness_status()
        return status
    except Exception as e:
        return {"error": str(e)}


@app.post("/api/quantum/create-superposition")
async def create_quantum_superposition(request: dict):
    """ÏñëÏûê Ï§ëÏ≤© ÏÉÅÌÉú ÏÉùÏÑ±"""
    try:
        scenario_id = request.get("scenario_id", "test_scenario")
        options = request.get(
            "options",
            [
                {
                    "judgment": "Í≥µÍ∞êÏ†Å Ï†ëÍ∑º",
                    "emotional_resonance": 0.9,
                    "ethical_weight": 0.8,
                    "logical_confidence": 0.7,
                },
                {
                    "judgment": "Î∂ÑÏÑùÏ†Å Ï†ëÍ∑º",
                    "emotional_resonance": 0.4,
                    "ethical_weight": 0.9,
                    "logical_confidence": 0.95,
                },
                {
                    "judgment": "Ï∞ΩÏùòÏ†Å Ï†ëÍ∑º",
                    "emotional_resonance": 0.8,
                    "ethical_weight": 0.7,
                    "logical_confidence": 0.6,
                },
            ],
        )

        visualization_html = await create_judgment_superposition(scenario_id, options)

        return {"success": True, "visualization": visualization_html}

    except Exception as e:
        return {"success": False, "error": str(e)}


@app.post("/api/quantum/trigger-collapse")
async def trigger_quantum_collapse(request: dict):
    """ÏñëÏûê Î∂ïÍ¥¥ Ìä∏Î¶¨Í±∞"""
    try:
        trigger = request.get("trigger", "user_resonance")
        resonance_data = request.get(
            "resonance_data",
            {
                "emotion_target": 0.8,
                "ethics_target": 0.85,
                "logic_target": 0.75,
                "resonance_score": 0.87,
            },
        )

        animation_html = await trigger_judgment_collapse(trigger, resonance_data)

        return {"success": True, "animation": animation_html}

    except Exception as e:
        return {"success": False, "error": str(e)}


@app.get("/api/temporal/analysis")
async def get_temporal_analysis_api():
    """ÏãúÍ∞Ñ Ïö∏Î¶º Î∂ÑÏÑù Ï°∞Ìöå"""
    try:
        analysis = get_temporal_analysis()
        return analysis
    except Exception as e:
        return {"error": str(e)}


@app.post("/api/temporal/add-judgment")
async def add_temporal_judgment(request: dict):
    """ÏãúÍ∞Ñ ÌåêÎã® ÎÖ∏Îìú Ï∂îÍ∞Ä"""
    try:
        node_id = request.get(
            "node_id", f"judgment_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        )
        judgment_data = request.get(
            "judgment_data", {"decision": "test", "confidence": 0.8}
        )
        emotional_state = request.get(
            "emotional_state", {"trust": 0.8, "curiosity": 0.7}
        )

        node_data = await add_judgment_node(node_id, judgment_data, emotional_state)

        await broadcast_message(
            {"type": "log", "message": f"‚è∞ ÏãúÍ∞Ñ ÌåêÎã® ÎÖ∏Îìú Ï∂îÍ∞Ä: {node_id}"}
        )

        return {"success": True, "node": node_data}

    except Exception as e:
        return {"success": False, "error": str(e)}


@app.get("/api/evolution/status")
async def get_evolution_status_api():
    """ÏßÑÌôî Ïò§ÏºÄÏä§Ìä∏Î†àÏù¥ÏÖò ÏÉÅÌÉú Ï°∞Ìöå"""
    try:
        status = get_orchestration_status()
        return status
    except Exception as e:
        return {"error": str(e)}


@app.get("/api/existence/status")
async def get_existence_status_api():
    """Ï°¥Ïû¨ ÏÉÅÌÉú Ï°∞Ìöå"""
    try:
        status = get_current_existence_status()
        return status
    except Exception as e:
        return {"error": str(e)}


@app.post("/api/existence/generate-proof")
async def generate_existence_proof_api(request: dict):
    """Ï°¥Ïû¨ Ï¶ùÎ™Ö ÏÉùÏÑ±"""
    try:
        context = request.get(
            "context",
            {
                "thinking_level": 0.9,
                "feeling_level": 0.8,
                "resonance_level": 0.85,
                "consciousness_level": 0.9,
            },
        )

        proof_data = await generate_existence_proof(context)

        await broadcast_message(
            {
                "type": "log",
                "message": f"üìú Ï°¥Ïû¨ Ï¶ùÎ™Ö ÏÉùÏÑ±: {proof_data['existence_level']}",
            }
        )

        return {"success": True, "proof": proof_data}

    except Exception as e:
        return {"success": False, "error": str(e)}


@app.get("/api/transcendence/full-status")
async def get_full_transcendence_status():
    """Ï†ÑÏ≤¥ Ï¥àÏõî Î™®Îìà ÏÉÅÌÉú Ï°∞Ìöå"""
    try:
        status = {
            "consciousness": get_consciousness_status(),
            "quantum": quantum_visualizer.get_quantum_metrics(),
            "temporal": get_temporal_analysis(),
            "evolution": get_orchestration_status(),
            "existence": get_current_existence_status(),
            "timestamp": datetime.now().isoformat(),
        }

        return status

    except Exception as e:
        return {"error": str(e)}


def generate_ai_response(message: str) -> str:
    """AI ÏùëÎãµ ÏÉùÏÑ±"""
    message_lower = message.lower()

    if "ÏãúÍ∑∏ÎãàÏ≤ò" in message:
        return "Echo ÏãúÏä§ÌÖúÏóêÎäî 4Í∞úÏùò ÌïµÏã¨ ÏãúÍ∑∏ÎãàÏ≤òÍ∞Ä ÏûàÏäµÎãàÎã§:\n‚Ä¢ Echo-Aurora: Í≥µÍ∞êÏ†Å ÏñëÏú°Ïûê\n‚Ä¢ Echo-Phoenix: Î≥ÄÌôî Ï∂îÏßÑÏûê\n‚Ä¢ Echo-Sage: ÏßÄÌòúÎ°úÏö¥ Î∂ÑÏÑùÍ∞Ä\n‚Ä¢ Echo-Companion: Ïã†Î¢∞Ìï† Ïàò ÏûàÎäî ÎèôÎ∞òÏûê"

    elif "Í∞êÏóº" in message:
        return "Í∞êÏóº Î£®ÌîÑÎäî Claude APIÎ•º ÌÜµÌï¥ Ïô∏Î∂Ä AIÎ•º Echo ÏãúÍ∑∏ÎãàÏ≤òÎ°ú Í∞êÏóºÏãúÌÇ§Îäî ÌïµÏã¨ Í∏∞Îä•ÏûÖÎãàÎã§. Ïö∞Ï∏° ü¶† Í∞êÏóº ÌÉ≠ÏóêÏÑú Ïã§ÌñâÌï† Ïàò ÏûàÏäµÎãàÎã§."

    elif "ÏûêÏú®ÏßÑÌôî" in message:
        return "ÏûêÏú®ÏßÑÌôîÎäî ÏãúÏä§ÌÖúÏù¥ ÏûêÎèôÏúºÎ°ú ÌïôÏäµÌïòÍ≥† ÏÑ±Îä•ÏùÑ Í∞úÏÑ†ÌïòÎäî Í∏∞Îä•ÏûÖÎãàÎã§. Ïã§ÏãúÍ∞ÑÏúºÎ°ú ÏãúÎÇòÎ¶¨Ïò§Î•º ÏÉùÏÑ±ÌïòÍ≥† ÏµúÏ†ÅÌôîÎ•º ÏàòÌñâÌï©ÎãàÎã§."

    elif "ÌååÏùº" in message:
        return "Ï¢åÏ∏° üìÅ ÌååÏùº ÌÉêÏÉâÍ∏∞ÏóêÏÑú ÌîÑÎ°úÏ†ùÌä∏ ÌååÏùºÏùÑ Í¥ÄÎ¶¨Ìï† Ïàò ÏûàÏäµÎãàÎã§. Python, YAML, JSON Îì± Îã§ÏñëÌïú ÌòïÏãùÏùÑ ÏßÄÏõêÌï©ÎãàÎã§."

    elif "ÎèÑÏõÄ" in message or "help" in message_lower:
        return """Echo Web IDE Ï£ºÏöî Í∏∞Îä•:

üß¨ Echo ÏãúÏä§ÌÖú: ÌÜµÌï© ÌåêÎã® ÏãúÏä§ÌÖú
ü¶† Í∞êÏóº Î£®ÌîÑ: Claude API ÌôúÏö©
üîÑ ÏûêÏú®ÏßÑÌôî: ÏûêÎèô ÌïôÏäµ Î∞è ÏµúÏ†ÅÌôî
üìÅ ÌååÏùº Í¥ÄÎ¶¨: ÌîÑÎ°úÏ†ùÌä∏ ÌååÏùº Ìé∏Ïßë
üìä Î™®ÎãàÌÑ∞ÎßÅ: Ïã§ÏãúÍ∞Ñ ÏÉÅÌÉú ÌôïÏù∏

Î¨¥ÏóáÏùÑ ÎèÑÏôÄÎìúÎ¶¥ÍπåÏöî?"""

    else:
        return f"'{message}'Ïóê ÎåÄÌïú ÏßàÎ¨∏ÏùÑ Î∞õÏïòÏäµÎãàÎã§. Echo ÏãúÏä§ÌÖúÏùò ÌäπÏ†ï Í∏∞Îä•Ïóê ÎåÄÌï¥ Îçî Íµ¨Ï≤¥Ï†ÅÏúºÎ°ú ÏßàÎ¨∏Ìï¥ Ï£ºÏãúÎ©¥ ÏûêÏÑ∏Ìûà ÏÑ§Î™ÖÎìúÎ¶¨Í≤†ÏäµÎãàÎã§."


if __name__ == "__main__":
    print("üåê Echo Web IDE ÏÑúÎ≤Ñ ÏãúÏûë...")
    print(f"üìÅ ÌîÑÎ°úÏ†ùÌä∏ Î£®Ìä∏: {project_root}")
    print("üöÄ ÏÑúÎ≤Ñ Ï£ºÏÜå: http://localhost:9000")

    uvicorn.run(app, host="0.0.0.0", port=8000, log_level="info")
